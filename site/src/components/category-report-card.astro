---
import Markets from "@atoms/num-markets.astro";
import Grade from "@atoms/grade.astro";
import ScoreRel from "@atoms/score-rel.astro";
import ScoreAbs from "@atoms/score-abs.astro";
import type {
  OtherScoreDetails,
  PlatformCategoryScoreDetails,
  Category,
  Platform,
} from "@types";

interface Props {
  platforms: Platform[];
  categories: Category[];
  platformCategoryScores: PlatformCategoryScoreDetails[];
  overallScores: OtherScoreDetails[];
  pivot: "platform" | "category";
}
const { platforms, categories, platformCategoryScores, overallScores, pivot } =
  Astro.props;

let scoreType = "brier";
let relScorePostfix = "relative";
let absScorePostfix = "average";

// Find the appropriate combination scores
let comboScores = [];
if (pivot == "platform") {
  comboScores = platforms.map((platform) => {
    const scoreRel = platformCategoryScores.find(
      (pcs) =>
        pcs.platform_slug == platform.slug &&
        pcs.score_type == `${scoreType}-${relScorePostfix}`,
    );
    if (!scoreRel) {
      throw new Error(
        `Combo score ${platform.slug}/${scoreType}-${relScorePostfix} not found!`,
      );
    }
    const scoreAbs = platformCategoryScores.find(
      (pcs) =>
        pcs.platform_slug == platform.slug &&
        pcs.score_type == `${scoreType}-${absScorePostfix}`,
    );
    if (!scoreAbs) {
      throw new Error(
        `Combo score ${platform.slug}/${scoreType}-${absScorePostfix} not found!`,
      );
    }
    return { name: platform.name, scoreRel: scoreRel, scoreAbs: scoreAbs };
  });
} else {
  comboScores = categories.map((category) => {
    const scoreRel = platformCategoryScores.find(
      (pcs) =>
        pcs.category_slug == category.slug &&
        pcs.score_type == `${scoreType}-${relScorePostfix}`,
    );
    if (!scoreRel) {
      throw new Error(
        `Combo score ${category.slug}/${scoreType}-${relScorePostfix} not found!`,
      );
    }
    const scoreAbs = platformCategoryScores.find(
      (pcs) =>
        pcs.category_slug == category.slug &&
        pcs.score_type == `${scoreType}-${absScorePostfix}`,
    );
    if (!scoreAbs) {
      throw new Error(
        `Combo score ${category.slug}/${scoreType}-${absScorePostfix} not found!`,
      );
    }
    return { name: category.name, scoreRel: scoreRel, scoreAbs: scoreAbs };
  });
}

// Find the appropriate overall scores
const overallScoreRel = overallScores.find(
  (s) => s.score_type == `${scoreType}-${relScorePostfix}`,
);
if (!overallScoreRel) {
  throw new Error(`Overall score ${scoreType}-${relScorePostfix} not found!`);
}
const overallScoreAbs = overallScores.find(
  (s) => s.score_type == `${scoreType}-${absScorePostfix}`,
);
if (!overallScoreAbs) {
  throw new Error(`Overall score ${scoreType}-${absScorePostfix} not found!`);
}

const headerLabel = pivot === "platform" ? "Platform" : "Category";
---

<div
  class="p-4 m-2 bg-base-light text-crust rounded-md drop-shadow-sm overflow-x-auto"
>
  <table class="w-full">
    <thead>
      <tr class="border-b-2">
        <th class="text-left min-w-24 pb-1">{headerLabel}</th>
        <th class="text-center min-w-20 w-24 pb-1">Markets</th>
        <th colspan="2" class="text-center w-24 pb-1"> Midpoint Brier </th>
        <th colspan="2" class="text-center w-24 pb-1"> Relative Score </th>
      </tr>
    </thead>
    <tbody>
      {
        comboScores.map((score) => (
          <tr class="last:border-t-2">
            <td class="px-2 py-1 text-left">{score.name}</td>
            <td class="px-2 py-1 text-center">
              <Markets num={score.scoreAbs.num_markets} align={true} />
            </td>
            <td class="px-2 py-1 text-center">
              <Grade grade={score.scoreAbs.grade} />
            </td>
            <td class="px-2 py-1 text-center">
              <ScoreAbs num={score.scoreAbs.score} />
            </td>
            <td class="px-2 py-1 text-center">
              <Grade grade={score.scoreRel.grade} />
            </td>
            <td class="px-2 py-1 text-center">
              <ScoreRel num={score.scoreRel.score} />
            </td>
          </tr>
        ))
      }
      <tr class="last:border-t-2">
        <td class="px-2 py-1 text-left">Overall</td>
        <td class="px-2 py-1 text-center">
          <Markets num={overallScoreAbs.num_markets} align={true} />
        </td>
        <td class="px-2 py-1 text-center">
          <Grade grade={overallScoreAbs.grade} />
        </td>
        <td class="px-2 py-1 text-center">
          <ScoreAbs num={overallScoreAbs.score} />
        </td>
      </tr>
    </tbody>
  </table>
</div>
