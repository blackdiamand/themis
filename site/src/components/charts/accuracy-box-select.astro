---
import type { MarketScoreDetails, PlatformDetails } from "@types";
import { Icon } from "astro-icon/components";

interface Props {
  plotId: string;
  platforms: PlatformDetails[];
  options: Array<{
    icon?: string | null;
    description: string;
    scores: MarketScoreDetails[];
    scoreType?: string | null;
    axisTitleX?: string | null;
    axisTitleY?: string | null;
    plotRangeStart?: number | null;
    plotRangeEnd?: number | null;
  }>;
}
const { plotId, platforms, options } = Astro.props;

export interface AccuracyBoxDatapoint {
  platformName: string;
  colorPrimary: string;
  colorAccent: string;
  whiskerStart: number;
  boxStart: number;
  boxCenter: number;
  boxEnd: number;
  whiskerEnd: number;
}

function getPercentile(arr: MarketScoreDetails[], percentile: number): number {
  // assumes the scores are pre-sorted
  const index = percentile * (arr.length - 1);

  if (Number.isInteger(index)) {
    return arr[index].score;
  } else {
    // interpolate to get percentile between points
    const lowerIndex = Math.floor(index);
    const upperIndex = Math.ceil(index);
    return (
      arr[lowerIndex].score +
      (index - lowerIndex) * (arr[upperIndex].score - arr[lowerIndex].score)
    );
  }
}

const optionsCalculated = options.map((option) => {
  const scoreType = option.scoreType || "brier-midpoint";
  const filteredScoresType = option.scores.filter(
    (ms) => ms.score_type == scoreType,
  );

  const platformPoints: AccuracyBoxDatapoint[] = platforms.reduce<
    AccuracyBoxDatapoint[]
  >((acc, platform) => {
    const filteredScoresPlatform = filteredScoresType.filter(
      (ms) => ms.platform_slug == platform.slug,
    );
    if (filteredScoresPlatform.length === 0) {
      return acc;
    }
    const min = filteredScoresPlatform[0].score;
    const q1 = getPercentile(filteredScoresPlatform, 0.25);
    const q3 = getPercentile(filteredScoresPlatform, 0.75);
    const max = filteredScoresPlatform[filteredScoresPlatform.length - 1].score;
    const iqr = q3 - q1;
    acc.push({
      platformName: platform.name,
      colorPrimary: platform.color_primary,
      colorAccent: platform.color_accent,
      whiskerStart: Math.max(q1 - 1.5 * iqr, min),
      boxStart: q1,
      boxCenter: getPercentile(filteredScoresPlatform, 0.5),
      boxEnd: q3,
      whiskerEnd: Math.min(q3 + 1.5 * iqr, max),
    });
    return acc;
  }, []);

  let plotRange = [];
  if (option.plotRangeEnd == null) {
    plotRange = [option.plotRangeStart || 0, 0.8];
  } else {
    plotRange = [option.plotRangeStart || 0, option.plotRangeEnd];
  }
  return {
    icon: option.icon,
    description: option.description,
    numMarkets: filteredScoresType.length,
    axisTitleX: option.axisTitleX || "Platform",
    axisTitleY: option.axisTitleY || "Market score",
    plotRangeY: plotRange,
    points: platformPoints,
  };
});
---

<div class="grid gap-2 grid-cols-1 md:grid-cols-3">
  <div class="flex-col space-y-2">
    {
      optionsCalculated.map((opt, index) => (
        <div class="bg-base-light text-crust rounded-md drop-shadow-sm px-4 py-2">
          <div class="flex items-center">
            <input
              type="radio"
              id={`accuracy-option-${plotId}-${index}`}
              name={`accuracy-option-${plotId}`}
              value={index}
              class={`w-5 h-5 mr-4 text-mantle accuracy-option-${plotId}`}
            />
            <label for={`accuracy-option-${plotId}-${index}`} class="w-full">
              <span>
                {opt.icon && <Icon name={opt.icon} class="inline mb-1 mr-1" />}
                {opt.description}
              </span>
              <div class="text-xs text-right">
                n={opt.numMarkets.toLocaleString()}
              </div>
            </label>
          </div>
        </div>
      ))
    }
  </div>
  <div class="col-span-2">
    <div
      class="bg-base-light [&_h2]:text-2xl [&_figcaption]:text-xs text-crust rounded-md drop-shadow-sm p-4 overflow-x-auto"
    >
      <div
        id={`accuracy-plot-${plotId}`}
        class="accuracy-plot"
        data-options={JSON.stringify(optionsCalculated)}
      >
      </div>
    </div>
  </div>
</div>

<script>
  import * as Plot from "@observablehq/plot";
  import type { AccuracyBoxDatapoint } from "./accuracy-box-select.astro";

  interface AccuracyPlotElement extends HTMLElement {
    dataset: {
      options: string;
    };
  }
  interface OptionData {
    description: string;
    axisTitleX: string;
    axisTitleY: string;
    plotRangeY: number[];
    points: AccuracyBoxDatapoint[];
  }

  // Function to get the selected option based on user input
  function getSelectedOption(
    options: OptionData[],
    radios: HTMLInputElement[],
  ) {
    for (let i = 0; i < radios.length; i++) {
      if (radios[i].checked) {
        return options[i];
      }
    }
    // Default to first option if none are selected
    return options[0];
  }

  // Update the given plot when called
  function updatePlot(plotElement: AccuracyPlotElement, option: OptionData) {
    const plotWidth = parseInt(window.getComputedStyle(plotElement).width);
    console.log("Updating plot...");

    const plot = Plot.plot({
      title: "Accuracy By Platform",
      width: plotWidth,
      //aspectRatio: 2,
      x: { label: option.axisTitleX },
      y: {
        domain: option.plotRangeY,
        grid: true,
        label: option.axisTitleY,
      },
      marks: [
        Plot.ruleX(option.points, {
          x: "platformName",
          y1: "whiskerStart",
          y2: "boxStart",
          stroke: "colorAccent",
        }),
        Plot.barY(option.points, {
          x: "platformName",
          y1: "boxStart",
          y2: "boxEnd",
          fill: "colorPrimary",
          stroke: "colorAccent",
          strokeWidth: 2,
        }),
        Plot.ruleX(option.points, {
          x: "platformName",
          y1: "boxEnd",
          y2: "whiskerEnd",
          stroke: "colorAccent",
        }),
        Plot.tickY(option.points, {
          x: "platformName",
          y: "boxCenter",
          stroke: "colorAccent",
          strokeWidth: 2,
          channels: {
            Point: () => "Median",
          },
          tip: true,
        }),
      ],
    });

    // Wipe the existing plot and add the new one
    while (plotElement.firstChild) {
      plotElement.removeChild(plotElement.firstChild);
    }
    plotElement.appendChild(plot);
  }

  // Get all matching plot elements
  const plotElements = document.querySelectorAll(
    ".accuracy-plot",
  ) as NodeListOf<AccuracyPlotElement>;

  // Set up each plot
  plotElements.forEach((plotElement) => {
    // Extract options
    const options = JSON.parse(plotElement.dataset.options) as OptionData[];

    // Extract plot ID
    let plotId = "";
    const regex = /accuracy-plot-(.*)$/;
    const match = plotElement.id.match(regex);
    if (match && match.length > 1) {
      plotId = match[1];
    } else {
      throw new Error(`Invalid plot ID: ${plotElement.id}`);
    }

    // Find options that match the plot ID
    const radios = [
      ...document.querySelectorAll(`.accuracy-option-${plotId}`),
    ] as HTMLInputElement[];

    // Set the first radio button to checked by default
    if (radios.length > 0) {
      radios[0].checked = true;
    }

    // Update the plot with initial values
    updatePlot(plotElement, getSelectedOption(options, radios));

    // Set the callbacks for future changes
    radios.forEach((radio) => {
      radio.addEventListener("change", () => {
        const selectedOption = getSelectedOption(options, radios);
        updatePlot(plotElement, selectedOption);
      });
    });
  });
</script>
