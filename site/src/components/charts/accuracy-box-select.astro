---
import type { MarketDetails, PlatformDetails } from "@types";

interface Props {
  platforms: PlatformDetails[];
  markets: MarketDetails[];
}
const { platforms, markets } = Astro.props;

export interface AccuracyDatapoint {
  platform: string;
  colorPrimary: string;
  colorAccent: string;
  extStart: number;
  boxStart: number;
  boxCenter: number;
  boxEnd: number;
  extEnd: number;
}

const points: AccuracyDatapoint[] = platforms.map((p) => ({
  platform: p.name,
  colorPrimary: p.color_primary,
  colorAccent: p.color_accent,
  extStart: 0.1 + Math.random() * 0.1,
  boxStart: 0.25 + Math.random() * 0.1,
  boxCenter: 0.5 + Math.random() * 0.1,
  boxEnd: 0.75 + Math.random() * 0.1,
  extEnd: 0.9 + Math.random() * 0.1,
}));
---

<div
  class="bg-base-light [&_h2]:text-2xl [&_figcaption]:text-xs text-crust rounded-md drop-shadow-sm p-4 overflow-x-auto"
>
  <div
    id="accuracy-plot-default"
    data-platforms={JSON.stringify(platforms)}
    data-points={JSON.stringify(points)}
  >
  </div>
</div>

<script>
  import * as Plot from "@observablehq/plot";
  import type { CalibrationPoint, PlatformDetails } from "@types";
  import type { AccuracyDatapoint } from "./accuracy-box-select.astro";

  interface CalibrationPlotElement extends HTMLElement {
    dataset: {
      platforms: string;
      points: string;
    };
  }

  // Get a reference to the plot element using ID
  const plotElement = document.getElementById(
    "accuracy-plot-default",
  ) as CalibrationPlotElement | null;

  if (plotElement) {
    const platforms = JSON.parse(
      plotElement.dataset.platforms,
    ) as PlatformDetails[];
    const points = JSON.parse(
      plotElement.dataset.points,
    ) as AccuracyDatapoint[];

    const plotWidth = parseInt(window.getComputedStyle(plotElement).width);

    const plot = Plot.plot({
      title: "Accuracy By Platform",
      width: plotWidth,
      //aspectRatio: 2,
      x: { label: "Platform" },
      y: { domain: [0, 1], grid: true, label: "Score" },
      marks: [
        Plot.ruleX(points, {
          x: "platform",
          y1: "extStart",
          y2: "boxStart",
          stroke: "colorAccent",
        }),
        Plot.barY(points, {
          x: "platform",
          y1: "boxStart",
          y2: "boxEnd",
          fill: "colorPrimary",
          stroke: "colorAccent",
          strokeWidth: 2,
        }),
        Plot.ruleX(points, {
          x: "platform",
          y1: "boxEnd",
          y2: "extEnd",
          stroke: "colorAccent",
        }),
        Plot.tickY(points, {
          x: "platform",
          y: "boxCenter",
          stroke: "colorAccent",
          strokeWidth: 2,
        }),
      ],
    });

    plotElement.append(plot);
  } else {
    throw new Error("Could not find plot element.");
  }
</script>
