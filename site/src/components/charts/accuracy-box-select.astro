---
import type { MarketScoreDetails, PlatformDetails } from "@types";
import { quartiles } from "@lib/stats";
import SelectableOptions from "./selectable-options.astro";

interface Props {
  plotId: string;
  platforms: PlatformDetails[];
  options: Array<{
    icon?: string | null;
    description: string;
    scores: MarketScoreDetails[];
    scoreType?: string | null;
    axisTitleX?: string | null;
    axisTitleY?: string | null;
    plotRangeStart?: number | null;
    plotRangeEnd?: number | null;
  }>;
}
const { plotId, platforms, options } = Astro.props;

export interface AccuracyBoxDatapoint {
  platformName: string;
  colorPrimary: string;
  colorAccent: string;
  whiskerStart: number;
  boxStart: number;
  boxCenter: number;
  boxEnd: number;
  whiskerEnd: number;
}

const optionsCalculated = options.map((option) => {
  const scoreType = option.scoreType || "brier-midpoint";
  const filteredScoresType = option.scores.filter(
    (ms) => ms.score_type == scoreType,
  );

  const platformPoints: AccuracyBoxDatapoint[] = platforms.reduce<
    AccuracyBoxDatapoint[]
  >((acc, platform) => {
    const filteredScoresPlatform = filteredScoresType.filter(
      (ms) => ms.platform_slug == platform.slug,
    );
    if (filteredScoresPlatform.length === 0) {
      return acc;
    }
    const scores = filteredScoresPlatform.map((s) => s.score);
    const { c1, q1, q2, q3, c3 } = quartiles(scores);
    acc.push({
      platformName: platform.name,
      colorPrimary: platform.color_primary,
      colorAccent: platform.color_accent,
      whiskerStart: c1,
      boxStart: q1,
      boxCenter: q2,
      boxEnd: q3,
      whiskerEnd: c3,
    });
    return acc;
  }, []);

  let plotRange = [];
  if (option.plotRangeEnd == null) {
    plotRange = [option.plotRangeStart || 0, 0.8];
  } else {
    plotRange = [option.plotRangeStart || 0, option.plotRangeEnd];
  }
  return {
    id: `accuracy-option-${Math.random().toString(36).slice(2, 7)}`,
    icon: option.icon,
    description: option.description,
    count: filteredScoresType.length,
    axisTitleX: option.axisTitleX || "Platform",
    axisTitleY: option.axisTitleY || "Market score",
    plotRangeY: plotRange,
    points: platformPoints,
  };
});
---

<div class="grid gap-2 grid-cols-1 md:grid-cols-3">
  <SelectableOptions 
    plotId={plotId}
    optionClass="accuracy-option"
    options={optionsCalculated}
  />
  <div class="col-span-2">
    <div
      class="bg-base-light [&_h2]:text-2xl [&_figcaption]:text-xs text-crust rounded-md drop-shadow-sm p-4 overflow-x-auto"
    >
      <div
        id={`accuracy-plot-${plotId}`}
        class="accuracy-plot"
        data-options={JSON.stringify(optionsCalculated)}
      >
      </div>
    </div>
  </div>
</div>

<script>
  import * as Plot from "@observablehq/plot";
  import type { AccuracyBoxDatapoint } from "./accuracy-box-select.astro";
  import { initSelectableCharts, updatePlotElement } from "@lib/charts/selectable-option";

  interface OptionData {
    id: string;
    description: string;
    axisTitleX: string;
    axisTitleY: string;
    plotRangeY: number[];
    points: AccuracyBoxDatapoint[];
  }

  // Update the given plot when called
  function updatePlot(plotElement: HTMLElement, option: OptionData) {
    const plotWidth = parseInt(window.getComputedStyle(plotElement).width);

    const plot = Plot.plot({
      title: "Accuracy By Platform",
      width: plotWidth,
      //aspectRatio: 2,
      x: { label: option.axisTitleX },
      y: {
        domain: option.plotRangeY,
        grid: true,
        label: option.axisTitleY,
      },
      marks: [
        Plot.ruleX(option.points, {
          x: "platformName",
          y1: "whiskerStart",
          y2: "boxStart",
          stroke: "colorAccent",
        }),
        Plot.barY(option.points, {
          x: "platformName",
          y1: "boxStart",
          y2: "boxEnd",
          fill: "colorPrimary",
          stroke: "colorAccent",
          strokeWidth: 2,
        }),
        Plot.ruleX(option.points, {
          x: "platformName",
          y1: "boxEnd",
          y2: "whiskerEnd",
          stroke: "colorAccent",
        }),
        Plot.tickY(option.points, {
          x: "platformName",
          y: "boxCenter",
          stroke: "colorAccent",
          strokeWidth: 2,
          channels: {
            Point: () => "Median",
          },
          tip: true,
        }),
      ],
    });

    updatePlotElement(plotElement, plot as any);
  }

  // Initialize all accuracy plots
  document.addEventListener("DOMContentLoaded", () => {
    initSelectableCharts<OptionData>(
      "accuracy-plot",
      "accuracy-option",
      updatePlot,
      (element) => JSON.parse((element as HTMLElement & { dataset: any }).dataset.options)
    );
  });
</script>
