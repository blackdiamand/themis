---
import type { MarketScoreDetails, PlatformDetails } from "@types";

import * as Plot from "@observablehq/plot";
import { JSDOM } from "jsdom";
import { quartiles } from "@lib/stats";
const { document } = new JSDOM().window;

interface Props {
  platforms: PlatformDetails[];
  scores: MarketScoreDetails[];
  width?: number;
  aspectRatio?: number;
  caption?: string;
}
let { platforms, scores, width = 720, aspectRatio, caption } = Astro.props;

scores = scores.filter((score) => score.score_type === "brier-midpoint");

let xspan = [
  {
    key: "all",
    label: "All Markets",
    order: 1,
  },
  {
    key: "no",
    label: "Resolved NO",
    order: 2,
  },
  {
    key: "yes",
    label: "Resolved YES",
    order: 3,
  },
  {
    key: "prob",
    label: "Resolved PROB",
    order: 4,
  },
];

const scoresStats = [];
for (const xitem of xspan) {
  // Iterate through all platforms
  for (const platform of platforms) {
    // Filter scores for current score type and platform
    const platformScores = scores.filter(
      (ms) => ms.platform_name === platform.name,
    );
    let filteredScores: number[] = [];
    if (xitem.key == "all") {
      filteredScores = platformScores.map((ms) => ms.score);
    } else if (xitem.key == "no") {
      filteredScores = platformScores
        .filter((ms) => ms.resolution === 0)
        .map((ms) => ms.score);
    } else if (xitem.key == "yes") {
      filteredScores = platformScores
        .filter((ms) => ms.resolution === 1)
        .map((ms) => ms.score);
    } else if (xitem.key == "prob") {
      filteredScores = platformScores
        .filter((ms) => ms.resolution != 0 && ms.resolution != 1)
        .map((ms) => ms.score);
    } else {
      throw new Error(`Invalid score type: ${xitem.key}`);
    }

    scoresStats.push({
      score_type: xitem.key,
      score_type_order: xitem.order,
      platform_name: platform.name,
      ...quartiles(filteredScores),
    });
  }
}

// Generate the plot
const plot = Plot.plot({
  title: "Brier Scores by Resolution",
  width: width,
  aspectRatio: aspectRatio,
  fx: {
    label: "Resolution",
    tickFormat: (d) => xspan.find((st) => st.key === d)?.label || d,
  },
  x: { axis: null },
  y: {
    grid: true,
    domain: [0, 0.8],
    label: "Brier score (lower is better)",
  },
  color: {
    legend: platforms.length > 1,
    label: "Platform",
    domain: platforms.map((p) => p.name),
    range: platforms.map((p) => p.color_primary),
  },
  marks: [
    Plot.ruleX(scoresStats, {
      fx: "score_type",
      x: "platform_name",
      y1: "c1",
      y2: "q1",
      channels: { fxorder: "score_type_order" },
      sort: { fx: "fxorder" },
    }),
    Plot.barY(scoresStats, {
      fx: "score_type",
      x: "platform_name",
      y1: "q1",
      y2: "q3",
      channels: { fxorder: "score_type_order" },
      sort: { fx: "fxorder" },
      fill: "platform_name",
      strokeWidth: 2,
    }),
    Plot.ruleX(scoresStats, {
      fx: "score_type",
      x: "platform_name",
      y1: "q3",
      y2: "c3",
      channels: { fxorder: "score_type_order" },
      sort: { fx: "fxorder" },
    }),
    Plot.tickY(scoresStats, {
      fx: "score_type",
      x: "platform_name",
      y: "q2",
      channels: { fxorder: "score_type_order" },
      sort: { fx: "fxorder" },
      strokeWidth: 2,
    }),
  ],
  document,
}).outerHTML;
---

<div
  class="bg-base-light [&_h2]:text-2xl text-crust rounded-md drop-shadow-sm p-4 overflow-x-auto"
>
  <Fragment set:html={plot} />
  <p class="text-xs">
    {caption}
    n={scores.length.toLocaleString()} markets
  </p>
  <p class="text-xs">
    Source: <a href="https://brier.fyi">brier.fyi</a>
  </p>
</div>
