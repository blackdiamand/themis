---
import { getCriterionProbs, getMarkets, getPlatforms } from "@lib/api";
import { calculateCalibrationPoints } from "@lib/calibration";

// Download markets and platforms
const markets = await getMarkets();
const platforms = await getPlatforms();
const ctiterion_probs = await getCriterionProbs(null);

// Calculate calibration points
const points = calculateCalibrationPoints(markets, ctiterion_probs, "midpoint");
---

<div
  class="bg-base-light [&_h2]:text-2xl text-crust rounded-md drop-shadow-sm p-4 overflow-x-auto"
>
  <div
    id="calibration-plot-default"
    data-platforms={JSON.stringify(platforms)}
    data-points={JSON.stringify(points)}
  >
  </div>
</div>

<script>
  import * as Plot from "@observablehq/plot";
  import type { CalibrationPoint, PlatformDetails } from "@types";

  interface CalibrationPlotElement extends HTMLElement {
    dataset: {
      platforms: string;
      points: string;
    };
  }

  // Get a reference to the plot element using ID
  const plotElement = document.getElementById(
    "calibration-plot-default",
  ) as CalibrationPlotElement | null;

  if (plotElement) {
    const platforms = JSON.parse(
      plotElement.dataset.platforms,
    ) as PlatformDetails[];
    const points = JSON.parse(plotElement.dataset.points) as CalibrationPoint[];

    const width = parseInt(window.getComputedStyle(plotElement).width);

    const plot = Plot.plot({
      title: "Calibration Plot",
      subtitle: "All resolved binary and multiple choice markets.",
      width: width,
      aspectRatio: 2,
      x: {
        domain: [0, 100],
        percent: true,
        label: "Prediction (Midpoint)",
      },
      y: { domain: [0, 100], grid: true, percent: true, label: "Resolution" },
      r: { range: [10, 20], label: "Scale" },
      color: {
        legend: true,
        label: "Platform",
        domain: platforms.map((p) => p.name),
        range: platforms.map((p) => p.color_primary),
      },
      marks: [
        Plot.dot(points, {
          x: "x_center",
          y: "y_center",
          r: "count",
          fill: "platform_slug",
          stroke: "platform_slug",
          fillOpacity: 0.5,
          channels: {
            Prediction: (i: CalibrationPoint) =>
              (i.x_start * 100).toFixed(0) +
              "-" +
              (i.x_end * 100).toFixed(0) +
              "%",
            Resolution: (i: CalibrationPoint) =>
              (i.y_center * 100).toFixed(1) + "%",
            Markets: "count",
          },
          tip: {
            format: {
              x: null,
              y: null,
              r: null,
            },
          },
        }),
        Plot.ruleX([0]),
        Plot.ruleY([0]),
        Plot.lineY(
          [
            { x: 0, y: 0 },
            { x: 1, y: 1 },
          ],
          { x: "x", y: "y" },
        ),
      ],
    });

    plotElement.append(plot);
  } else {
    throw new Error("Could not find plot element.");
  }
</script>
