---
import type { MarketDetails, PlatformDetails } from "@types";
import { calculateCalibrationPoints } from "@lib/calibration";

import * as Plot from "@observablehq/plot";
import { JSDOM } from "jsdom";
const { document } = new JSDOM().window;

interface Props {
  platforms: PlatformDetails[];
  markets: MarketDetails[];
  criterion?: string;
  width?: number;
  height?: number;
  aspectRatio?: number;
  caption?: string;
}
let {
  platforms,
  markets,
  criterion = "midpoint",
  width = 720,
  height,
  aspectRatio,
  caption,
} = Astro.props;

// Calculate calibration points
const points = await calculateCalibrationPoints(markets, criterion, null, true);

let axisTitleX = {
  midpoint: "Prediction (Midpoint)",
  "time-average": "Prediction (Time-Average)",
  "before-close-hours-24": "Prediction (24h before resolution)",
  "before-close-days-30": "Prediction (30d before resolution)",
  "before-close-days-90": "Prediction (90d before resolution)",
  "before-close-days-365": "Prediction (one year before resolution)",
  "after-start-hours-24": "Prediction (24h after open)",
}[criterion];

// Generate the plot
const plot = Plot.plot({
  title: "Calibration Stem Plot",
  width: width,
  height: height,
  aspectRatio: aspectRatio,
  x: {
    domain: [0, 100],
    percent: true,
    label: axisTitleX,
  },
  y: { grid: true, label: "Resolution" },
  marks: [
    Plot.ruleX(points, {
      x: "pred_center",
      y: "count_yes",
      strokeWidth: 5,
    }),
    Plot.ruleX(points, {
      x: "pred_center",
      y: "count_no",
      strokeWidth: 5,
    }),
    Plot.ruleY([0]),
  ],
  document,
}).outerHTML;
---

<div
  class="bg-base-light [&_h2]:text-2xl text-crust rounded-md drop-shadow-sm p-4 overflow-x-auto"
>
  <Fragment set:html={plot} />
  <p class="text-xs">
    {caption}
    n={markets.length.toLocaleString()} markets
  </p>
  <p class="text-xs">
    Source: <a href="https://brier.fyi">brier.fyi</a>
  </p>
</div>
