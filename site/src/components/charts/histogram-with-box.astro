---
import type { MarketScoreDetails, PlatformDetails } from "@types";

import * as Plot from "@observablehq/plot";
import { JSDOM } from "jsdom";
const { document } = new JSDOM().window;

interface Props {
  platforms: PlatformDetails[];
  scores: MarketScoreDetails[];
  scoreType: string;
  width?: number;
  aspectRatio?: number;
  caption?: string;
}
let {
  platforms,
  scores,
  scoreType,
  width = 720,
  aspectRatio,
  caption,
} = Astro.props;

let axisTitleX = {
  "brier-average": "Brier score, time-average",
  "brier-midpoint": "Brier score, midpoint",
  "brier-before-close-days-7": "Brier score, 7d before close",
  "brier-before-close-days-30": "Brier score, 30d before close",
  "logarithmic-average": "Logarithmic score, time-average",
  "logarithmic-midpoint": "Logarithmic score, midpoint",
  "logarithmic-before-close-days-7": "Logarithmic score, 7d before close",
  "logarithmic-before-close-days-30": "Logarithmic score, 30d before close",
  "spherical-average": "Spherical score, time-average",
  "spherical-midpoint": "Spherical score, midpoint",
  "spherical-before-close-days-7": "Spherical score, 7d before close",
  "spherical-before-close-days-30": "Spherical score, 30d before close",
}[scoreType];

const scoresFiltered = scores.filter((s) => s.score_type == scoreType);

// Generate the plot
const plots = [
  Plot.plot({
    title: "Distribution of Market Accuracy Scores",
    width: width,
    aspectRatio: aspectRatio,
    marginLeft: 70,
    x: { label: axisTitleX },
    y: {
      grid: true,
      label: "Count",
    },
    color: {
      legend: platforms.length > 1,
      label: "Platform",
      domain: platforms.map((p) => p.name),
      range: platforms.map((p) => p.color_primary),
    },
    marks: [
      Plot.rectY(
        scoresFiltered,
        Plot.binX(
          { y: "count" },
          {
            x: { value: "score", thresholds: 20 },
            // @ts-ignore: Dunno why it doesn't like this line
            fill: "platform_name",
            insetLeft: 1,
          },
        ),
      ),
    ],
    document,
  }).outerHTML,
  Plot.plot({
    width: width,
    marginLeft: 70,
    x: { label: axisTitleX },
    y: {
      grid: true,
      label: null,
    },
    color: {
      label: "Platform",
      domain: platforms.map((p) => p.name),
      range: platforms.map((p) => p.color_primary),
    },
    marks: [
      Plot.boxX(scoresFiltered, {
        y: "platform_name",
        fill: "platform_name",
        x: "score",
      }),
    ],
    document,
  }).outerHTML,
];
---

<div
  class="bg-base-light [&_h2]:text-2xl text-crust rounded-md drop-shadow-sm p-4 overflow-x-auto"
>
  {plots.map((plot) => <Fragment set:html={plot} />)}
  <p class="text-xs">
    {caption}
  </p>
  <p class="text-xs">
    Source: <a href="https://predictionmetrics.org">predictionmetrics.org</a>
  </p>
</div>
