---
import { getMarkets, getPlatforms, getCriterionProbs } from "@lib/api";
import { calculateCalibrationPoints } from "@lib/calibration";

// Download markets and platforms
const markets = await getMarkets();
const platforms = await getPlatforms();

// Filters and descriptions
const filtersInput = [
  {
    description: "Show all resolved markets.",
    markets: markets,
  },
  {
    description:
      "Filter to at least 10 traders or $100 in trade volume, and open for at least 2 days.",
    markets: markets.filter((market) => {
      return (
        ((market.traders_count !== null && market.traders_count >= 10) ||
          (market.volume_usd !== null && market.volume_usd >= 100)) &&
        market.duration_days >= 2
      );
    }),
  },
  {
    description:
      "Filter to at least 100 traders or $1000 in trade volume, and open for at least 14 days.",
    markets: markets.filter((market) => {
      return (
        ((market.traders_count !== null && market.traders_count >= 100) ||
          (market.volume_usd !== null && market.volume_usd >= 1000)) &&
        market.duration_days >= 14
      );
    }),
  },
  {
    description:
      "Filter to at least 1000 traders or $10,000 in trade volume, and open for at least 30 days.",
    markets: markets.filter((market) => {
      return (
        ((market.traders_count !== null && market.traders_count >= 1000) ||
          (market.volume_usd !== null && market.volume_usd >= 10000)) &&
        market.duration_days >= 30
      );
    }),
  },
  {
    description: "Filter to markets from the past year.",
    markets: markets.filter(
      (market) =>
        new Date(market.close_datetime).getTime() >=
        new Date().getTime() - 365 * 24 * 60 * 60 * 1000,
    ),
  },
  {
    description: "Filter to markets that have been linked in questions.",
    markets: markets.filter((market) => market.question_id),
  },
];
const filtersOutput = filtersInput.map((filter) => ({
  description: filter.description,
  numMarkets: filter.markets.length,
  points: calculateCalibrationPoints(filter.markets, "midpoint"),
}));
---

<div class="grid gap-2 grid-cols-1 md:grid-cols-3">
  <div class="flex-col space-y-2">
    {
      filtersOutput.map((filter, index) => (
        <div class="bg-base-light text-crust rounded-md drop-shadow-sm px-4 py-2">
          <div class="flex items-center">
            <input
              type="radio"
              id={`filter-selection-${index}`}
              name="filter-selection"
              value={index}
              class="w-5 h-5 mr-4 text-mantle"
            />
            <label for={`filter-selection-${index}`} class="w-full">
              <span>{filter.description}</span>
              <div class="text-xs text-right">
                n={filter.numMarkets.toLocaleString()}
              </div>
            </label>
          </div>
        </div>
      ))
    }
  </div>
  <div class="col-span-2">
    <div
      class="bg-base-light [&_h2]:text-2xl text-crust rounded-md drop-shadow-sm p-4 overflow-x-auto"
    >
      <div
        id="calibration-plot-vary-selection"
        data-platforms={JSON.stringify(platforms)}
        data-filters={JSON.stringify(filtersOutput)}
      >
      </div>
    </div>
  </div>
</div>

<script>
  import * as Plot from "@observablehq/plot";
  import type { CalibrationPoint, PlatformDetails } from "@types";

  interface CalibrationPlotElement extends HTMLElement {
    dataset: {
      platforms: string;
      filters: string;
    };
  }
  interface FilterStruct {
    description: string;
    numMakrets: number;
    points: CalibrationPoint[];
  }

  // Get a reference to the plot element using ID
  const plotElement = document.getElementById(
    "calibration-plot-vary-selection",
  ) as CalibrationPlotElement | null;
  if (!plotElement) {
    throw new Error("Could not find plot element.");
  }

  // Get data embedded in plot element
  const platforms = JSON.parse(
    plotElement.dataset.platforms,
  ) as PlatformDetails[];
  const filters = JSON.parse(plotElement.dataset.filters) as FilterStruct[];
  const plotWidth = parseInt(window.getComputedStyle(plotElement).width);

  // Add listeners to update plot on change in selection
  let filterSelectedIndex: number = 0;
  const radios = document.querySelectorAll("input[name='filter-selection']");
  radios.forEach((radio) => {
    radio.addEventListener("change", async (event) => {
      const targetElement = event.target as HTMLInputElement;
      const newValue = parseInt(targetElement.value);
      if (!isNaN(newValue)) {
        const currentIndex = newValue;
        filterSelectedIndex = currentIndex;
        updatePlot();
      }
    });
  });

  // Update plot when called
  let points = [];
  function updatePlot() {
    if (!plotElement) {
      throw new Error("Could not find plot element.");
    }
    points = filters[filterSelectedIndex].points;
    if (points.length == 0) {
      throw new Error("Points are empty.");
    }

    // Build the plot
    const plot = Plot.plot({
      title: "Calibration Plot",
      width: plotWidth,
      aspectRatio: 2,
      x: {
        domain: [0, 100],
        percent: true,
        label: "Prediction (Midpoint)",
      },
      y: { domain: [0, 100], grid: true, percent: true, label: "Resolution" },
      r: { range: [8, 15], label: "Scale" },
      color: {
        legend: true,
        label: "Platform",
        domain: platforms.map((p) => p.name),
        range: platforms.map((p) => p.color_primary),
      },
      marks: [
        Plot.dot(points, {
          x: "x_center",
          y: "y_center",
          r: "count",
          fill: "platform_slug",
          stroke: "platform_slug",
          fillOpacity: 0.5,
          channels: {
            Prediction: (i: CalibrationPoint) =>
              (i.x_start * 100).toFixed(0) +
              "-" +
              (i.x_end * 100).toFixed(0) +
              "%",
            Resolution: (i: CalibrationPoint) =>
              (i.y_center * 100).toFixed(1) + "%",
            Markets: "count",
          },
          tip: {
            format: {
              x: null,
              y: null,
              r: null,
            },
          },
        }),
        Plot.ruleX([0]),
        Plot.ruleY([0]),
        Plot.lineY(
          [
            { x: 0, y: 0 },
            { x: 1, y: 1 },
          ],
          { x: "x", y: "y" },
        ),
      ],
    });

    // Remove existing plot
    while (plotElement.firstChild) {
      plotElement.removeChild(plotElement.firstChild);
    }
    plotElement.appendChild(plot);
    console.log(plot);
  }

  // Initial render with default values
  updatePlot();
</script>
