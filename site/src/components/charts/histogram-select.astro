---
import type { MarketScoreDetails, PlatformDetails } from "@types";
import { Icon } from "astro-icon/components";

interface Props {
  plotId: string;
  platforms: PlatformDetails[];
  options: Array<{
    icon?: string | null;
    description: string;
    values: number[];
    plotTitle: string;
    axisTitleX: string;
    axisTitleY?: string | null;
    rangeStart: number;
    rangeEnd: number;
  }>;
}
const { plotId, platforms, options } = Astro.props;

export interface HistogramDatapoint {
  startX: number;
  endX: number;
  count: number;
}

const numBins = 20;
const optionsCalculated = options.map((option) => {
  const values = option.values;
  const minValue = option.rangeStart;
  const maxValue = option.rangeEnd;
  const binWidth = (maxValue - minValue) / numBins;

  const bins = Array(numBins).fill(0);
  values.forEach((value) => {
    const binIndex = Math.min(
      numBins - 1,
      Math.floor((value - minValue) / binWidth),
    );
    bins[binIndex]++;
  });
  const points: HistogramDatapoint[] = bins.map((count, index) => {
    const startX = minValue + index * binWidth;
    const endX = startX + binWidth;
    return { startX, endX, count };
  });

  return {
    icon: option.icon,
    description: option.description,
    count: option.values.length,
    plotTitle: option.plotTitle,
    axisTitleX: option.axisTitleX,
    axisTitleY: option.axisTitleY || "Count",
    points: points,
  };
});
---

<div class="grid gap-2 grid-cols-1 md:grid-cols-3">
  <div class="flex-col space-y-2">
    {
      optionsCalculated.map((opt, index) => (
        <div class="bg-base-light text-crust rounded-md drop-shadow-sm px-4 py-2">
          <div class="flex items-center">
            <input
              type="radio"
              id={`histogram-option-${plotId}-${index}`}
              name={`histogram-option-${plotId}`}
              value={index}
              class={`w-5 h-5 mr-4 text-mantle histogram-option-${plotId}`}
            />
            <label for={`histogram-option-${plotId}-${index}`} class="w-full">
              <span>
                {opt.icon && <Icon name={opt.icon} class="inline mb-1 mr-1" />}
                {opt.description}
              </span>
              <div class="text-xs text-right">
                n={opt.count.toLocaleString()}
              </div>
            </label>
          </div>
        </div>
      ))
    }
  </div>
  <div class="col-span-2">
    <div
      class="bg-base-light [&_h2]:text-2xl [&_figcaption]:text-xs text-crust rounded-md drop-shadow-sm p-4 overflow-x-auto"
    >
      <div
        id={`histogram-plot-${plotId}`}
        class="histogram-plot"
        data-options={JSON.stringify(optionsCalculated)}
      >
      </div>
    </div>
  </div>
</div>

<script>
  import * as Plot from "@observablehq/plot";
  import type { HistogramDatapoint } from "./histogram-select.astro";

  interface HistogramPlotElement extends HTMLElement {
    dataset: {
      options: string;
    };
  }
  interface OptionData {
    description: string;
    plotTitle: string;
    axisTitleX: string;
    axisTitleY: string;
    points: HistogramDatapoint[];
  }

  // Function to get the selected option based on user input
  function getSelectedOption(
    options: OptionData[],
    radios: HTMLInputElement[],
  ) {
    for (let i = 0; i < radios.length; i++) {
      if (radios[i].checked) {
        return options[i];
      }
    }
    // Default to first option if none are selected
    return options[0];
  }

  // Update the given plot when called
  function updatePlot(plotElement: HistogramPlotElement, option: OptionData) {
    const plotWidth = parseInt(window.getComputedStyle(plotElement).width);

    const plot = Plot.plot({
      title: option.plotTitle,
      width: plotWidth,
      //aspectRatio: 2,
      marginLeft: 50,
      x: { label: option.axisTitleX },
      y: {
        grid: true,
        label: option.axisTitleY,
      },
      marks: [
        Plot.rectY(option.points, {
          x1: "startX",
          x2: "endX",
          y: "count",
          inset: 1,
          tip: true,
        }),
      ],
    });

    // Wipe the existing plot and add the new one
    while (plotElement.firstChild) {
      plotElement.removeChild(plotElement.firstChild);
    }
    plotElement.appendChild(plot);
  }

  // Get all matching plot elements
  const plotElements = document.querySelectorAll(
    ".histogram-plot",
  ) as NodeListOf<HistogramPlotElement>;

  // Set up each plot
  plotElements.forEach((plotElement) => {
    // Extract options
    const options = JSON.parse(plotElement.dataset.options) as OptionData[];

    // Extract plot ID
    let plotId = "";
    const regex = /histogram-plot-(.*)$/;
    const match = plotElement.id.match(regex);
    if (match && match.length > 1) {
      plotId = match[1];
    } else {
      throw new Error(`Invalid plot ID: ${plotElement.id}`);
    }

    // Find options that match the plot ID
    const radios = [
      ...document.querySelectorAll(`.histogram-option-${plotId}`),
    ] as HTMLInputElement[];

    // Set the first radio button to checked by default
    if (radios.length > 0) {
      radios[0].checked = true;
    }

    // Update the plot with initial values
    updatePlot(plotElement, getSelectedOption(options, radios));

    // Set the callbacks for future changes
    radios.forEach((radio) => {
      radio.addEventListener("change", () => {
        const selectedOption = getSelectedOption(options, radios);
        updatePlot(plotElement, selectedOption);
      });
    });
  });
</script>
