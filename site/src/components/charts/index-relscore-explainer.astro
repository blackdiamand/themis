---
import { getDailyProbabilities, getMarketsByQuestion } from "@lib/api";
import type { QuestionDetails } from "@types";

interface Props {
  question: QuestionDetails;
}
const { question } = Astro.props;

// Download markets and points
const markets = await getMarketsByQuestion(question.id);
const points = await getDailyProbabilities(
  question.id,
  question.start_date_override,
  question.end_date_override,
);

// Get resolution from market
const resolution = markets[0].question_invert
  ? !markets[0].resolution
  : markets[0].resolution;
---

<div
  class="bg-base-light text-crust rounded-md drop-shadow-sm p-4 m-2 overflow-x-auto"
>
  <div id="plot-relscore-explainer-01" data-points={JSON.stringify(points)}>
  </div>
</div>
<div
  class="bg-base-light text-crust rounded-md drop-shadow-sm p-4 m-2 overflow-x-auto"
>
  <div
    id="plot-relscore-explainer-02"
    data-points={JSON.stringify(points)}
    data-resolution={resolution}
  >
  </div>
</div>

<script>
  import * as Plot from "@observablehq/plot";

  function brier_score(res: number, prob: number, invert: boolean): number {
    return (res - (invert ? 1 - prob : prob)) ** 2;
  }

  document
    .querySelectorAll("#plot-relscore-explainer-01")
    .forEach((plotElement) => {
      const points = JSON.parse(
        (plotElement as HTMLElement)?.dataset.points || "[]",
      );

      const plot = Plot.plot({
        title: "Daily Probability History",
        //width: 600,
        height: 200,
        x: { type: "utc", label: "Date" },
        y: {
          domain: [0, 100],
          grid: true,
          percent: true,
          label: "Probability",
        },
        color: {
          label: "Platform",
          domain: ["Manifold", "Kalshi", "Metaculus", "Polymarket"],
          range: ["#4337c9", "#00d298", "#283441", "#0072f9"],
        },
        marks: [
          Plot.line(points, {
            x: "date",
            y: (i) => (i.question_invert ? 1 - i.prob : i.prob),
            stroke: "platform_name",
            curve: "step",
            tip: {
              format: {
                platform_name: null,
                y: (i) => i.toFixed(0) + "%",
              },
            },
          }),
          Plot.ruleY([0]),
        ],
      });
      plotElement?.append(plot);
    });
  document
    .querySelectorAll("#plot-relscore-explainer-02")
    .forEach((plotElement) => {
      const points = JSON.parse(
        (plotElement as HTMLElement)?.dataset.points || "[]",
      );
      const rawResolution = (plotElement as HTMLElement)?.dataset.resolution;
      if (!rawResolution) {
        throw new Error("Missing resolution");
      }
      const resolution = Number(rawResolution);
      if (isNaN(resolution)) {
        throw new Error("Resolution is not a valid number");
      }

      const plot = Plot.plot({
        title: "Daily Calculated Brier Scores",
        //width: 600,
        height: 200,
        x: { type: "utc", label: "Date" },
        y: {
          //domain: [0, 1],
          grid: true,
          label: "Brier score (lower is better)",
        },
        color: {
          label: "Platform",
          domain: ["Manifold", "Kalshi", "Metaculus", "Polymarket"],
          range: ["#4337c9", "#00d298", "#283441", "#0072f9"],
        },
        marks: [
          Plot.line(points, {
            x: "date",
            y: (i) => brier_score(resolution, i.prob, i.question_invert),
            stroke: "platform_name",
            curve: "step",
            tip: {
              format: {
                platform_name: null,
                y: (i) => i.toFixed(0),
              },
            },
          }),
          Plot.ruleY([0]),
        ],
      });
      plotElement?.append(plot);
    });
</script>
