---
const { title, subtitle, points } = Astro.props;

// Generate a unique ID for each instance
const uniqueId = `plot-${Math.random().toString(36).substring(2, 9)}`;
---

<div
  class="bg-base-light [&_h2]:text-2xl text-crust rounded-md drop-shadow-sm p-4 overflow-x-auto"
>
  <div
    id={uniqueId}
    class="calibration-plot"
    data-title={title}
    data-subtitle={subtitle}
    data-points={JSON.stringify(points)}
  >
  </div>
</div>

<script>
  // @ts-nocheck
  import * as Plot from "@observablehq/plot";

  // Initialize all plots on the page
  document.querySelectorAll(".calibration-plot").forEach((plotElement) => {
    const title = plotElement?.dataset.title || "";
    const subtitle = plotElement?.dataset.subtitle || "";
    const points = JSON.parse(plotElement?.dataset.points || "[]");
    console.log(points[0]);
    const binWidth = 0.05;

    const plot = Plot.plot({
      title: title,
      subtitle: subtitle,
      width: 1200,
      height: 600,
      x: {
        domain: [0, 100],
        percent: true,
        label: "Prediction (Midpoint)",
      },
      y: {
        domain: [0, 100],
        grid: true,
        percent: true,
        label: "Resolution",
      },
      r: { range: [10, 20], label: "Scale" },
      color: {
        legend: true,
        label: "Platform",
        domain: ["Manifold", "Kalshi", "Metaculus", "Polymarket"],
        range: ["#4337c9", "#00d298", "#283441", "#0072f9"],
      },
      marks: [
        Plot.dot(points, {
          x: "x_center",
          y: "y_center",
          r: "count",
          fill: "platform_slug",
          stroke: "platform_slug",
          fillOpacity: 0.5,
          channels: {
            Prediction: (i) =>
              (i.x_start * 100).toFixed(0) +
              "-" +
              (i.x_end * 100).toFixed(0) +
              "%",
            Resolution: (i) => (i.y_center * 100).toFixed(1) + "%",
            Markets: "count",
          },
          tip: {
            format: {
              x: null,
              y: null,
              r: null,
            },
          },
        }),
        Plot.ruleX([0]),
        Plot.ruleY([0]),
        Plot.lineY(
          [
            { x: 0, y: 0 },
            { x: 1, y: 1 },
          ],
          { x: "x", y: "y" },
        ),
      ],
    });

    plotElement.append(plot);
  });
</script>
