---
interface Props {
  option: {
    values: Array<{
      value: number;
      series: string;
    }>;
    plotTitle: string;
    axisTitleX: string;
    axisTitleY?: string | null;
    rangeStart: number;
    rangeEnd: number;
  };
  series: Array<{
    key: string;
    name: string;
    color: string;
  }>;
}
const { option, series } = Astro.props;

export interface HistogramDatapoint {
  seriesName: string;
  seriesColor: string;
  startX: number;
  endX: number;
  count: number;
}

const numBins = 20;
const minValue = option.rangeStart;
const maxValue = option.rangeEnd;
const binWidth = (maxValue - minValue) / numBins;

// Create a nested array to count bins per series
const bins: { [seriesName: string]: number[] } = {};

option.values.forEach((v) => {
  if (!bins[v.series]) {
    bins[v.series] = Array(numBins).fill(0);
  }
  const binIndex = Math.min(
    numBins - 1,
    Math.floor((v.value - minValue) / binWidth),
  );
  bins[v.series][binIndex]++;
});

const points: HistogramDatapoint[] = [];
for (const [seriesKey, seriesBins] of Object.entries(bins)) {
  seriesBins.forEach((count, index) => {
    if (count > 0) {
      const seriesInfo = series.find((s) => s.key == seriesKey);
      if (!seriesInfo) throw new Error(`Series not found: ${seriesKey}`);
      const startX = minValue + index * binWidth;
      const endX = startX + binWidth;
      points.push({
        seriesName: seriesInfo.name,
        seriesColor: seriesInfo.color,
        startX,
        endX,
        count,
      });
    }
  });
}

const optionCalculated = {
  plotTitle: option.plotTitle,
  axisTitleX: option.axisTitleX,
  axisTitleY: option.axisTitleY || "Count",
  points: points,
};
---

<div
  class="bg-base-light [&_h2]:text-2xl [&_figcaption]:text-xs text-crust rounded-md drop-shadow-sm p-4 overflow-x-auto"
>
  <div
    id="histogram-plot-default"
    data-option={JSON.stringify(optionCalculated)}
  >
  </div>
</div>

<script>
  import * as Plot from "@observablehq/plot";
  import type { HistogramDatapoint } from "./histogram-select.astro";

  interface HistogramPlotElement extends HTMLElement {
    dataset: {
      option: string;
    };
  }
  interface OptionData {
    description: string;
    plotTitle: string;
    axisTitleX: string;
    axisTitleY: string;
    points: HistogramDatapoint[];
  }

  // Get a reference to the plot element using ID
  const plotElement = document.getElementById(
    "histogram-plot-default",
  ) as HistogramPlotElement | null;

  if (plotElement) {
    const option = JSON.parse(plotElement.dataset.option) as OptionData;
    const plotWidth = parseInt(window.getComputedStyle(plotElement).width);

    const plot = Plot.plot({
      title: option.plotTitle,
      width: plotWidth,
      // aspectRatio: 2,
      marginLeft: 50,
      x: { label: option.axisTitleX },
      y: {
        grid: true,
        label: option.axisTitleY,
      },
      marks: [
        Plot.rectY(option.points, {
          x1: "startX",
          x2: "endX",
          y: "count",
          fill: "seriesColor",
          channels: {
            Platform: "seriesName",
          },
          insetLeft: 1,
          insetRight: 1,
          tip: true,
        }),
      ],
    });

    // Wipe the existing plot and add the new one
    while (plotElement.firstChild) {
      plotElement.removeChild(plotElement.firstChild);
    }
    plotElement.appendChild(plot);
  }
</script>
