---
import type { MarketScoreDetails, PlatformDetails } from "@types";
import { quartilesByPlatform } from "@lib/stats";

import * as Plot from "@observablehq/plot";
import { JSDOM } from "jsdom";
const { document } = new JSDOM().window;

interface Props {
  platforms: PlatformDetails[];
  scores: MarketScoreDetails[];
  width?: number;
  height?: number;
  aspectRatio?: number;
  caption?: string;
}
let {
  platforms,
  scores,
  width = 600,
  height,
  aspectRatio,
  caption,
} = Astro.props;

const scoreType = "brier-relative";
const scoresFiltered = scores.filter(
  (s) => s.score_type == scoreType && s.score > -5,
);
if (scoresFiltered.length === 0) {
  console.warn(
    "No scores found for the selected score type. Chart will be blank.",
  );
}
const scoresStats = quartilesByPlatform(platforms, scoresFiltered);

// Generate the plot
const plot = Plot.plot({
  title: "Relative Brier Score Distribution",
  width: width,
  height: height,
  aspectRatio: aspectRatio,
  marginLeft: 70,
  x: {
    domain: [-0.05, 0.05],
    grid: true,
    label: "Relative Brier score",
  },
  y: {
    label: null,
    domain: platforms.map((p) => p.name),
  },
  color: {
    domain: platforms.map((p) => p.name),
    range: platforms.map((p) => p.color_primary),
  },
  marks: [
    Plot.ruleY(scoresStats, {
      y: "platform_name",
      x1: "c1",
      x2: "q1",
    }),
    Plot.barX(scoresStats, {
      y: "platform_name",
      x1: "q1",
      x2: "q3",
      fill: "platform_name",
      strokeWidth: 2,
    }),
    Plot.ruleY(scoresStats, {
      y: "platform_name",
      x1: "q3",
      x2: "c3",
    }),
    Plot.tickX(scoresStats, {
      y: "platform_name",
      x: "q2",
      strokeWidth: 2,
    }),
    Plot.ruleX([0]),
  ],
  document,
}).outerHTML;
---

<div
  class="bg-base-light [&_h2]:text-2xl text-crust rounded-md drop-shadow-sm p-4 overflow-x-auto"
>
  <Fragment set:html={plot} />
  <p class="text-xs">
    {caption}
  </p>
  <p class="text-xs">
    Source: <a href="https://brier.fyi">brier.fyi</a>
  </p>
</div>
