---
import Base from "@layouts/base.astro";
import CalibrationDefault from "@components/charts/calibration-default.astro";
import HistogramDefault from "@components/charts/histogram-scores-default.astro";
import CategoryReportCard from "@components/category-report-card.astro";
import QuestionCard from "@components/question-card.astro";
import SeeMoreLink from "@components/see-more-link.astro";
import Traders from "@atoms/traders.astro";
import Volume from "@atoms/volume.astro";
import Markets from "@atoms/num-markets.astro";
import {
  getPlatforms,
  getCategories,
  getFeaturedQuestions,
  getMarketScores,
  getPlatformCategoryScores,
  getCategoryOverallScores,
  getMarkets,
} from "@lib/api";

// Generate routes for all items
export async function getStaticPaths() {
  const categories = await getCategories();
  return categories.map((category) => ({
    params: { slug: category.slug },
    props: { category },
  }));
}
const { category } = Astro.props;

const platforms = await getPlatforms();
const markets = await getMarkets();
const platformCategoryScores = await getPlatformCategoryScores(null);
const categoryOverallScores = await getCategoryOverallScores();
const featuredQuestions = await getFeaturedQuestions(6, category.slug);
const marketScores = await getMarketScores();
---

<Base title={category.name}>
  <div class="grid grid-cols-1 md:grid-cols-2 pt-4">
    <div class="p-4 m-2">
      <div class="text-2xl font-semibold border-b-2">
        Category: {category.name}
      </div>
      <div class="my-2">
        <ul class="flex items-center space-x-4">
          <li>
            <Markets num={category.total_markets} />
          </li>
          <li>
            <Traders num={category.total_traders} />
          </li>
          <li>
            <Volume num={category.total_volume} />
          </li>
        </ul>
      </div>
      <div class="whitespace-pre-wrap my-2">{category.description}</div>
    </div>

    <CategoryReportCard
      platforms={platforms}
      categories={[category]}
      platformCategoryScores={platformCategoryScores.filter(
        (score) => score.category_slug == category.slug,
      )}
      overallScores={categoryOverallScores}
      pivot="platform"
    />
  </div>

  <div class="p-2 m-2">
    <h1 class="text-2xl font-bold">Charts</h1>
  </div>
  <div class="grid grid-cols-1 lg:grid-cols-2 gap-2">
    <CalibrationDefault
      platforms={platforms}
      markets={markets}
      caption="Calibration plot from all resolved questions, market probability at midpoint versus average resolution value."
    />
    <HistogramDefault
      platforms={platforms}
      scores={marketScores.filter((s) => s.category_slug == category.slug)}
      scoreType="brier-midpoint"
      caption="Brier scores from all resolved questions, using probability at market midpoint. Lower scores are better."
    />
  </div>
  <SeeMoreLink link={"/charts"} text={`See all charts`} />

  <div class="p-2 m-2">
    <h1 class="text-2xl font-bold">Questions</h1>
  </div>
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3">
    {
      featuredQuestions.map((question) => {
        const questionScores = marketScores.filter(
          (score) => score.question_id === question.id,
        );
        return (
          <QuestionCard
            question={question}
            categories={[category]}
            scores={questionScores}
          />
        );
      })
    }
  </div>
  <SeeMoreLink link={`/questions`} text={`See all questions`} />
</Base>
