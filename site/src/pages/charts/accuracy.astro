---
import Base from "@layouts/base.astro";
import AccuracyBoxSelect from "@components/charts/accuracy-box-select.astro";
import {
  getMarkets,
  getPlatforms,
  getCategories,
  getMarketScores,
} from "@lib/api";

// Download data
const markets = await getMarkets();
const platforms = await getPlatforms();
const categories = await getCategories();
const marketScores = await getMarketScores();

// pre-sort scores for easier percentile calculations
const scores = [...marketScores].sort((a, b) => a.score - b.score);
---

<Base title="Accuracy Charts">
  <div class="p-4 m-2">
    <h1 class="text-4xl font-bold">Accuracy Charts</h1>
  </div>

  <div class="my-4">
    <h2 class="font-bold text-2xl" id="vary-selection">Basic Filtering</h2>
    <div class="my-2">
      Select markets to include based on key attributes, such as number of
      traders, market volume, and duration. Alternatively, pick from a few other
      selection criteria.
    </div>
  </div>
  <AccuracyBoxSelect
    plotId="basic"
    platforms={platforms}
    options={[
      {
        icon: "mdi:all-inclusive-box",
        description: "Show all resolved markets.",
        scores: scores,
      },
      {
        icon: "mdi:alpha-a-box",
        description:
          "Filter to at least 10 traders or $100 in trade volume, and open for at least 2 days.",
        scores: scores.filter((ms) => {
          return (
            ((ms.traders_count !== null && ms.traders_count >= 10) ||
              (ms.volume_usd !== null && ms.volume_usd >= 100)) &&
            ms.duration_days >= 2
          );
        }),
      },
      {
        icon: "mdi:alpha-b-box",
        description:
          "Filter to at least 100 traders or $1000 in trade volume, and open for at least 14 days.",
        scores: scores.filter((ms) => {
          return (
            ((ms.traders_count !== null && ms.traders_count >= 100) ||
              (ms.volume_usd !== null && ms.volume_usd >= 1000)) &&
            ms.duration_days >= 14
          );
        }),
      },
      {
        icon: "mdi:alpha-c-box",
        description:
          "Filter to at least 1000 traders or $10,000 in trade volume, and open for at least 30 days.",
        scores: scores.filter((ms) => {
          return (
            ((ms.traders_count !== null && ms.traders_count >= 1000) ||
              (ms.volume_usd !== null && ms.volume_usd >= 10000)) &&
            ms.duration_days >= 30
          );
        }),
      },
      {
        icon: "mdi:calendar-check",
        description: "Filter to markets resolved in the past 12 months.",
        scores: scores.filter(
          (ms) =>
            new Date(ms.close_datetime).getTime() >=
            new Date().getTime() - 365 * 24 * 60 * 60 * 1000,
        ),
      },
      {
        icon: "mdi:check-decagram",
        description: "Filter to markets that have been linked in questions.",
        scores: scores.filter((ms) => ms.question_id),
      },
    ]}
  />
  <hr class="my-2" />

  <div class="p-4 m-2">
    <div class="my-4">
      <h2 class="font-bold text-2xl" id="vary-selection">Pick a Score</h2>
      <div class="my-2">
        We use the Brier score by default in most plots, but we calculate many
        more. Take a look at how the platforms compare when using these
        alternative scoring methods.
      </div>
    </div>
    <AccuracyBoxSelect
      plotId="scoreTypeBox"
      platforms={platforms}
      options={[
        {
          scoreType: "brier-midpoint",
          scores: scores,
          description:
            "Market Brier score, calculated with midpoint probability",
          axisTitleY: "Midpoint Brier score",
          plotRangeStart: 0,
          plotRangeEnd: 1,
        },
        {
          scoreType: "brier-average",
          scores: scores,
          description: "Market Brier score, averaged over the entire market",
          axisTitleY: "Average Brier score",
          plotRangeStart: 0,
          plotRangeEnd: 1,
        },
        {
          scoreType: "brier-relative",
          scores: scores,
          description: "Relative Brier score, calculated for linked markets",
          axisTitleY: "Relative Brier score",
          plotRangeStart: -0.1,
          plotRangeEnd: 0.1,
        },
        {
          scoreType: "logarithmic-midpoint",
          scores: scores,
          description: "Market log score, calculated with midpoint probability",
          axisTitleY: "Midpoint log score",
          plotRangeStart: -3,
          plotRangeEnd: 0,
        },
        {
          scoreType: "logarithmic-average",
          scores: scores,
          description: "Market log score, averaged over the entire market",
          axisTitleY: "Average log score",
          plotRangeStart: -3,
          plotRangeEnd: 0,
        },
        {
          scoreType: "logarithmic-relative",
          scores: scores,
          description: "Relative log score, calculated for linked markets",
          axisTitleY: "Relative log score",
          plotRangeStart: -0.25,
          plotRangeEnd: 0.25,
        },
      ]}
    />
  </div>
  <hr class="my-2" />

  <div class="p-4 m-2">
    <div class="my-4">
      <h2 class="font-bold text-2xl" id="vary-category">Category Filtering</h2>
      <div class="my-2">
        Group markets based on what category they're in. This is determined by
        how they are categorized on each platforn, and not all platforms are
        supported yet.
      </div>
    </div>
    <AccuracyBoxSelect
      plotId="category"
      platforms={platforms}
      options={[
        {
          icon: "mdi:compass-rose",
          description: "All categories",
          scores: scores,
        },
      ].concat(
        categories.map((category) => ({
          icon: category.icon,
          description: category.name,
          scores: scores.filter((ms) => ms.category_slug == category.slug),
        })),
      )}
    />
  </div>
</Base>
