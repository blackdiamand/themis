---
import Base from "@layouts/base.astro";
import SelectableOptions from "@components/charts/selectable-options.astro";
import CalibrationDefault from "@components/charts/calibration-default.astro";
import { getMarkets, getPlatforms, getCategories } from "@lib/api";

// Download markets and platforms
const markets = await getMarkets();
const platforms = await getPlatforms();
const categories = await getCategories();
---

<Base title="Calibration Charts">
  <div class="p-4 m-2 pb-0 mb-0">
    <h1 class="text-4xl font-bold">Calibration Charts</h1>
    <div class="mt-2">
      Calibration is a very simple metric at its core. If a market's listed
      probability is at 70%, we should expect it to resolve YES about 70% of the
      time. For all past markets, we can look at the market's midpoint
      probability and compare it to the end result. If those numbers match, we
      say the platform is well-calibrated. If they don't, there may be some
      systemic reason why forecasters routinely under- or over-estimate the
      odds.
    </div>
  </div>

  <div class="p-4 m-2">
    <div class="my-4">
      <h2 class="font-bold text-2xl" id="vary-selection">Basic Filtering</h2>
      <div class="my-2">
        Select markets to include in the calibration plot based on key
        attributes, such as number of traders, market volume, and duration.
        Alternatively, pick from a few other selection criteria.
      </div>
    </div>
    <SelectableOptions
      options={[
        {
          icon: "mdi:all-inclusive-box",
          description: "Show all resolved markets.",
          component: CalibrationDefault,
          props: {
            platforms: platforms,
            markets: markets,
            scoreType: "brier-midpoint",
          },
        },
        {
          icon: "mdi:alpha-a-box",
          description:
            "Filter to at least 10 traders or $100 in trade volume, and open for at least 2 days.",
          component: CalibrationDefault,
          props: {
            platforms: platforms,
            markets: markets.filter((market) => {
              return (
                ((market.traders_count !== null &&
                  market.traders_count >= 10) ||
                  (market.volume_usd !== null && market.volume_usd >= 100)) &&
                market.duration_days >= 2
              );
            }),
            scoreType: "brier-midpoint",
          },
        },
        {
          icon: "mdi:alpha-b-box",
          description:
            "Filter to at least 100 traders or $1000 in trade volume, and open for at least 14 days.",
          component: CalibrationDefault,
          props: {
            platforms: platforms,
            markets: markets.filter((market) => {
              return (
                ((market.traders_count !== null &&
                  market.traders_count >= 100) ||
                  (market.volume_usd !== null && market.volume_usd >= 1000)) &&
                market.duration_days >= 14
              );
            }),
            scoreType: "brier-midpoint",
          },
        },
        {
          icon: "mdi:alpha-c-box",
          description:
            "Filter to at least 1000 traders or $10,000 in trade volume, and open for at least 30 days.",
          component: CalibrationDefault,
          props: {
            platforms: platforms,
            markets: markets.filter((ms) => {
              return (
                ((ms.traders_count !== null && ms.traders_count >= 1000) ||
                  (ms.volume_usd !== null && ms.volume_usd >= 10000)) &&
                ms.duration_days >= 30
              );
            }),
            scoreType: "brier-midpoint",
          },
        },
        {
          icon: "mdi:calendar-check",
          description: "Filter to markets resolved in the past 12 months.",
          component: CalibrationDefault,
          props: {
            platforms: platforms,
            markets: markets.filter(
              (market) =>
                new Date(market.close_datetime).getTime() >=
                new Date().getTime() - 365 * 24 * 60 * 60 * 1000,
            ),
            scoreType: "brier-midpoint",
          },
        },
        {
          icon: "mdi:check-decagram",
          description: "Filter to markets that have been linked in questions.",
          component: CalibrationDefault,
          props: {
            platforms: platforms,
            markets: markets.filter((market) => market.question_id),
            scoreType: "brier-midpoint",
          },
        },
      ]}
    />
  </div>
  <hr class="my-2" />

  <div class="p-4 m-2">
    <div class="my-4">
      <h2 class="font-bold text-2xl" id="vary-category">Category Filtering</h2>
      <div class="my-2">
        Group markets based on what category they're in. This is determined by
        how they are categorized on each platforn, and not all platforms are
        supported yet.
      </div>
    </div>
    <SelectableOptions
      options={[
        {
          icon: "mdi:compass-rose",
          description: "All categories",
          component: CalibrationDefault,
          props: {
            platforms: platforms,
            markets: markets,
            scoreType: "brier-midpoint",
          },
        },
      ].concat(
        categories.map((category) => ({
          icon: category.icon,
          description: category.name,
          component: CalibrationDefault,
          props: {
            platforms: platforms,
            markets: markets.filter(
              (market) => market.category_slug == category.slug,
            ),
            scoreType: "brier-midpoint",
          },
        })),
      )}
    />
  </div>
  <hr class="my-2" />

  <div class="p-4 m-2">
    <div class="my-4">
      <h2 class="font-bold text-2xl" id="vary-prediction">
        Differing Predictions
      </h2>
      <div class="my-2">
        Up until this point we've used the midpoint of each market as the
        refrence value. What if we used something else, such as the average
        probability or a fixed point in time?
      </div>
    </div>
    <SelectableOptions
      options={[
        {
          icon: "mdi:format-horizontal-align-center",
          description: "Probability at midpoint (default)",
          component: CalibrationDefault,
          props: {
            platforms: platforms,
            markets: markets,
            criterion: "midpoint",
          },
        },
        {
          icon: "mdi:timer-outline",
          description: "Time-weighted average probability",
          component: CalibrationDefault,
          props: {
            platforms: platforms,
            markets: markets,
            criterion: "time-average",
          },
        },
        {
          icon: "mdi:timer-sand-complete",
          description: "Probability 24 hours before resolution",
          component: CalibrationDefault,
          props: {
            platforms: platforms,
            markets: markets.filter((market) => market.duration_days > 2),
            criterion: "before-close-hours-24",
          },
        },
        {
          icon: "mdi:timer-sand-complete",
          description: "Probability 30 days before resolution",
          component: CalibrationDefault,
          props: {
            platforms: platforms,
            markets: markets.filter((market) => market.duration_days > 31),
            criterion: "before-close-days-30",
          },
        },
        {
          icon: "mdi:timer-sand-complete",
          description: "Probability 90 days before resolution",
          component: CalibrationDefault,
          props: {
            platforms: platforms,
            markets: markets.filter((market) => market.duration_days > 91),
            criterion: "before-close-days-90",
          },
        },
        {
          icon: "mdi:timer-sand-complete",
          description: "Probability 365 days before resolution",
          component: CalibrationDefault,
          props: {
            platforms: platforms,
            markets: markets.filter((market) => market.duration_days > 366),
            criterion: "before-close-days-365",
          },
        },
        {
          icon: "mdi:timer-sand",
          description: "Probability 24 hours after open",
          component: CalibrationDefault,
          props: {
            platforms: platforms,
            markets: markets.filter((market) => market.duration_days > 2),
            criterion: "after-start-hours-24",
          },
        },
      ]}
    />
  </div>
  <hr class="my-2" />

  <div class="p-4 m-2">
    <div class="my-4">
      <h2 class="font-bold text-2xl" id="vary-weight">Weighted Averages</h2>
      <div class="my-2">
        Typically all markets are trated equally with a raw average. What if we
        used a weighted average instead? For instance, markets with $100 in
        trade volume might be weighted 10 times as heavily as one with $10. This
        allows us to prioritize markets that have properties we think are
        beneficial without ignoring others.
      </div>
    </div>
    <SelectableOptions
      options={[
        {
          icon: "mdi:border-none-variant",
          description: "Unweighted",
          component: CalibrationDefault,
          props: {
            platforms: platforms,
            markets: markets,
          },
        },
        {
          icon: "mdi:cash",
          description: "Weight market by trade volume",
          component: CalibrationDefault,
          props: {
            platforms: platforms,
            markets: markets.filter(
              (market) => market.volume_usd && market.volume_usd > 0,
            ),
            weight: "volume_usd",
          },
        },
        {
          icon: "mdi:account-multiple",
          description: "Weight market by number of traders",
          component: CalibrationDefault,
          props: {
            platforms: platforms,
            markets: markets.filter(
              (market) => market.traders_count && market.traders_count > 0,
            ),
            weight: "traders_count",
          },
        },
        {
          icon: "mdi:calendar-blank",
          description: "Weight market by market duration",
          component: CalibrationDefault,
          props: {
            platforms: platforms,
            markets: markets.filter((market) => market.duration_days > 0),
            weight: "duration_days",
          },
        },
        {
          icon: "mdi:calendar-clock",
          description: "Weight market by recency",
          component: CalibrationDefault,
          props: {
            platforms: platforms,
            markets: markets,
            weight: "recency",
          },
        },
      ]}
    />
  </div>
</Base>
