---
import Base from "@layouts/base.astro";
import CalibrationBase from "@components/charts/calibration-base.astro";
import { getMarkets, getPlatforms, getCategories } from "@lib/api";

// Download markets and platforms
const markets = await getMarkets();
const platforms = await getPlatforms();
const categories = await getCategories();
---

<Base title="Calibration Charts">
  <div class="p-4 m-2">
    <h1 class="text-4xl font-bold">Calibration Charts</h1>
  </div>

  <div class="p-4 m-2">
    <div class="my-4">
      <h2 class="font-bold text-2xl" id="vary-selection">Basic Filtering</h2>
      <div class="my-2">
        Select markets to include in the calibration plot based on key
        attributes, such as number of traders, market volume, and duration.
        Alternatively, pick from a few other selection criteria.
      </div>
    </div>
    <CalibrationBase
      plotId="basic"
      platforms={platforms}
      options={[
        {
          icon: "mdi:all-inclusive-box",
          description: "Show all resolved markets.",
          markets: markets,
        },
        {
          icon: "mdi:alpha-a-box",
          description:
            "Filter to at least 10 traders or $100 in trade volume, and open for at least 2 days.",
          markets: markets.filter((market) => {
            return (
              ((market.traders_count !== null && market.traders_count >= 10) ||
                (market.volume_usd !== null && market.volume_usd >= 100)) &&
              market.duration_days >= 2
            );
          }),
        },
        {
          icon: "mdi:alpha-b-box",
          description:
            "Filter to at least 100 traders or $1000 in trade volume, and open for at least 14 days.",
          markets: markets.filter((market) => {
            return (
              ((market.traders_count !== null && market.traders_count >= 100) ||
                (market.volume_usd !== null && market.volume_usd >= 1000)) &&
              market.duration_days >= 14
            );
          }),
        },
        {
          icon: "mdi:alpha-c-box",
          description:
            "Filter to at least 1000 traders or $10,000 in trade volume, and open for at least 30 days.",
          markets: markets.filter((market) => {
            return (
              ((market.traders_count !== null &&
                market.traders_count >= 1000) ||
                (market.volume_usd !== null && market.volume_usd >= 10000)) &&
              market.duration_days >= 30
            );
          }),
        },
        {
          icon: "mdi:calendar-check",
          description: "Filter to markets resolved in the past 12 months.",
          markets: markets.filter(
            (market) =>
              new Date(market.close_datetime).getTime() >=
              new Date().getTime() - 365 * 24 * 60 * 60 * 1000,
          ),
        },
        {
          icon: "mdi:check-decagram",
          description: "Filter to markets that have been linked in questions.",
          markets: markets.filter((market) => market.question_id),
        },
      ]}
    />
  </div>
  <hr class="my-2" />

  <div class="p-4 m-2">
    <div class="my-4">
      <h2 class="font-bold text-2xl" id="vary-category">Category Filtering</h2>
      <div class="my-2">
        Group markets based on what category they're in. This is determined by
        how they are categorized on each platforn, and not all platforms are
        supported yet.
      </div>
    </div>
    <CalibrationBase
      plotId="category"
      platforms={platforms}
      options={[
        {
          icon: "mdi:compass-rose",
          description: "All categories",
          markets: markets,
        },
      ].concat(
        categories.map((category) => ({
          icon: category.icon,
          description: category.name,
          markets: markets.filter(
            (market) => market.category_slug == category.slug,
          ),
        })),
      )}
    />
  </div>
  <hr class="my-2" />

  <div class="p-4 m-2">
    <div class="my-4">
      <h2 class="font-bold text-2xl" id="vary-prediction">
        Differing Predictions
      </h2>
      <div class="my-2">
        Up until this point we've used the midpoint of each market as the
        refrence value. What if we used something else, such as the average
        probability or a fixed point in time?
      </div>
    </div>
    <CalibrationBase
      plotId="criterion"
      platforms={platforms}
      options={[
        {
          icon: "mdi:format-horizontal-align-center",
          description: "Probability at midpoint (default)",
          axisTitleX: "Prediction (midpoint)",
          markets: markets,
          criterion: "midpoint",
        },
        {
          icon: "mdi:timer-outline",
          description: "Time-weighted average probability",
          axisTitleX: "Prediction (average)",
          markets: markets,
          criterion: "time-average",
        },
        {
          icon: "mdi:timer-sand-complete",
          description: "Probability 24 hours before resolution",
          axisTitleX: "Prediction (24h before resolution)",
          markets: markets.filter((market) => market.duration_days > 2),
          criterion: "before-close-hours-24",
        },
        {
          icon: "mdi:timer-sand-complete",
          description: "Probability 30 days before resolution",
          axisTitleX: "Prediction (30d before resolution)",
          markets: markets.filter((market) => market.duration_days > 31),
          criterion: "before-close-days-30",
        },
        {
          icon: "mdi:timer-sand-complete",
          description: "Probability 90 days before resolution",
          axisTitleX: "Prediction (90d before resolution)",
          markets: markets.filter((market) => market.duration_days > 91),
          criterion: "before-close-days-90",
        },
        {
          icon: "mdi:timer-sand-complete",
          description: "Probability 365 days before resolution",
          axisTitleX: "Prediction (one year before resolution)",
          markets: markets.filter((market) => market.duration_days > 366),
          criterion: "before-close-days-365",
        },
        {
          icon: "mdi:timer-sand",
          description: "Probability 24 hours after open",
          axisTitleX: "Prediction (24h after open)",
          markets: markets.filter((market) => market.duration_days > 2),
          criterion: "after-start-hours-24",
        },
      ]}
    />
  </div>
  <hr class="my-2" />

  <div class="p-4 m-2">
    <div class="my-4">
      <h2 class="font-bold text-2xl" id="vary-prediction">Weighted Averages</h2>
      <div class="my-2">
        Typically all markets are trated equally with a raw average. What if we
        used a weighted average instead? For instance, markets with $100 in
        trade volume might be weighted 10 times as heavily as one with $10. This
        allows us to prioritize markets that have properties we think are
        beneficial without ignoring others.
      </div>
    </div>
    <CalibrationBase
      plotId="weight"
      platforms={platforms}
      options={[
        {
          icon: "mdi:border-none-variant",
          description: "Unweighted",
          axisTitleY: "Resolution, unweighted",
          markets: markets,
        },
        {
          icon: "mdi:cash",
          description: "Weight market by trade volume",
          axisTitleY: "Resolution, weighted by volume",
          markets: markets.filter(
            (market) => market.volume_usd && market.volume_usd > 0,
          ),
          weight: "volume_usd",
        },
        {
          icon: "mdi:account-multiple",
          description: "Weight market by number of traders",
          axisTitleY: "Resolution, weighted by traders",
          markets: markets.filter(
            (market) => market.traders_count && market.traders_count > 0,
          ),
          weight: "traders_count",
        },
        {
          icon: "mdi:calendar-blank",
          description: "Weight market by market duration",
          axisTitleY: "Resolution, weighted by duration",
          markets: markets.filter((market) => market.duration_days > 0),
          weight: "duration_days",
        },
        {
          icon: "mdi:calendar-clock",
          description: "Weight market by recency",
          axisTitleY: "Resolution, weighted by recency",
          markets: markets,
          weight: "recency",
        },
      ]}
    />
  </div>
</Base>
