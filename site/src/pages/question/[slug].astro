---
import Base from "@layouts/base.astro";
import QuestionProbChart from "@components/charts/question-probs.astro";
import Traders from "@atoms/traders.astro";
import Volume from "@atoms/volume.astro";
import Duration from "@atoms/duration.astro";
import Grade from "@atoms/grade.astro";
import ScoreRel from "@atoms/score-rel.astro";
import ScoreAbs from "@atoms/score-abs.astro";
import { Icon } from "astro-icon/components";
import {
  getMarkets,
  getQuestions,
  getMarketScores,
  getQuestionOverallScores,
  getCategories,
} from "@lib/api";

// Generate routes for all items
// Note: rendering still takes a while due to the question prob card
export async function getStaticPaths() {
  const categories = await getCategories();
  const questions = await getQuestions();
  const marketsAll = await getMarkets();
  const marketScoresAll = await getMarketScores();
  const questionScoresAll = await getQuestionOverallScores(null);
  return questions.map((question) => {
    const markets = marketsAll.filter(
      (market) => market.question_id === question.id,
    );
    const marketScores = marketScoresAll.filter(
      (score) => score.question_id === question.id,
    );
    const questionScores = questionScoresAll.filter(
      (score) => score.item_id === question.id.toString(),
    );
    return {
      params: { slug: question.slug },
      props: { categories, question, markets, marketScores, questionScores },
    };
  });
}
const { categories, question, markets, marketScores, questionScores } =
  Astro.props;

// Listed score types
// TODO: Put this in the database
const scoreLayout = [
  {
    row_title: "Brier/Quadratic score:",
    items: [
      {
        label: "Midpoint:",
        key: "brier-midpoint",
        type: "absolute"
      },
      {
        label: "Average:",
        key: "brier-average",
        type: "absolute"
      },
      {
        label: "Relative:",
        key: "brier-relative",
        type: "relative"
      },
    ],
  },
  {
    row_title: "Logarithmic score:",
    items: [
      {
        label: "Midpoint:",
        key: "logarithmic-midpoint",
        type: "absolute"
      },
      {
        label: "Average:",
        key: "logarithmic-average",
        type: "absolute"
      },
      {
        label: "Relative:",
        key: "logarithmic-relative",
        type: "relative"
      },
    ],
  },
  {
    row_title: "Spherical score:",
    items: [
      {
        label: "Midpoint:",
        key: "spherical-midpoint",
        type: "absolute"
      },
      {
        label: "Average:",
        key: "spherical-average",
        type: "absolute"
      },
      {
        label: "Relative:",
        key: "spherical-relative",
        type: "relative"
      },
    ],
  },
];

// Select category
const category = categories.find(
  (category) => category.slug === question.category_slug,
);
if (!category) {
  throw new Error(`Category not found for slug ${question.category_slug}`);
}

function getMarketScore(market_id: string, score_key: string) {
  const score = marketScores.find(
    (s) => s.market_id == market_id && s.score_type == score_key,
  );
  if (!score) {
    throw new Error(`Market score ${market_id}/${score_key} not found`);
  }
  return score;
}
function getQuestionScore(score_key: string) {
  const score = questionScores.find(
    (s) => s.item_id == question.id.toString() && s.score_type == score_key,
  );
  if (!score) {
    throw new Error(`Question score ${question.id}/${score_key} not found`);
  }
  return score;
}

// Get resolution from market
const resolution = markets[0].question_invert
  ? !markets[0].resolution
  : markets[0].resolution;
---

<Base title="Market">
  <div class="grid grid-cols-1 md:grid-cols-2 pt-4">
    <div class="p-4 m-2">
      <div class="text-2xl mb-2">{question.title}</div>
      <ul class="flex flex-wrap items-center gap-3 my-2">
        <li>
          Resolved
          {
            resolution ? (
              <span class="mx-1 px-2 rounded-sm bg-green/20">YES</span>
            ) : (
              <span class="mx-1 px-2 rounded-sm bg-red/20">NO</span>
            )
          }
        </li>
        <li>
          Category
          <span class="mx-1 px-2 rounded-sm bg-selection/20">
            <Icon name={category.icon} class="inline mr-0 mb-1" />
            <a href={`/category/${question.category_slug}`}>
              {question.category_name}
            </a>
          </span>
        </li>
      </ul>
      <ul class="flex flex-wrap items-center gap-3 my-2">
        <li><Duration num={question.total_duration} /></li>
        <li><Traders num={question.total_traders} /></li>
        <li><Volume num={question.total_volume} /></li>
      </ul>
      <!-- TODO: Tags
        <ul class="flex items-center space-x-4 my-2">
            <li class="font-semibold">Tags:</li>
            {question.tags.map((tag) => <li>{tag}</li>)}
        </ul>
      -->
      <div class="whitespace-pre-wrap my-2">{question.description}</div>
    </div>
    <div>
      <QuestionProbChart question={question} />
    </div>
  </div>
  <div class="p-2 m-2">
    <h1 class="text-2xl font-bold">Detailed Scores</h1>
  </div>
  <div class="bg-crust rounded-md drop-shadow-md p-4 m-2">
    {
      markets.map((market) => (
        <div class="mb-6">
          <!-- Platform/Market Header -->
          <div class="border-b-1">
            <ul class="flex flex-wrap items-center gap-x-3">
              <li class="font-bold text-lg">{market.platform_name}</li>
              <li>
                <Duration num={market.duration_days} />
              </li>
              {market.traders_count && (
                <li>
                  <Traders num={market.traders_count} />
                </li>
              )}
              {market.volume_usd && (
                <li>
                  <Volume num={market.volume_usd} />
                </li>
              )}
            </ul>
            <h3 class="italic">
              <a href={market.url} target="_blank" class="text-lavender">
                {market.title}
                {market.question_invert ? "| Inverted" : ""}
                <Icon name="mdi:open-in-new" class="inline mb-1 ml-1" />
              </a>
            </h3>
          </div>

          <!-- Score Details -->
          <div class="grid grid-cols-1 md:grid-cols-3">
            {scoreLayout.map((scoreRow) => {
                return (
                <div class="my-2">
                    <div class="ml-4">
                        <span class="">{scoreRow.row_title}</span>
                    </div>
                    {scoreRow.items.map((item) => {
                    const score = getMarketScore(market.id, item.key);
                    return (
                        <div class="ml-8">
                            <span class="inline-block w-20 mx-2 text-right">
                                {item.label}
                            </span>
                            <span class="inline-block w-20 text-right">
                                <Grade grade={score.grade} />
                            </span>
                            <span class="inline-block w-20 text-right">
                                {item.type == "absolute" ? (<ScoreAbs num={score.score} />) : (<ScoreRel num={score.score} />)}
                            </span>
                        </div>
                    )})}
                </div>
                );
            })}
          </div>
        </div>
      ))
    }

    <!-- Overall Header -->
    <div>
      <div
        class="flex space-x-4 border-b-1 flex-col sm:flex-row self-baseline sm:self-center"
      >
        <ul class="flex flex-wrap items-center gap-x-3">
          <li class="font-bold text-lg">Overall</li>
          <li>
            <Duration num={question.total_duration} />
          </li>
          <li>
            <Traders num={question.total_traders} />
          </li>
          <li>
            <Volume num={question.total_volume} />
          </li>
        </ul>
      </div>

      <!-- Overall Score Details -->
      <div class="grid grid-cols-1 md:grid-cols-3">
        {scoreLayout.map((scoreRow) => {
            return (
            <div class="my-2">
                <div class="ml-4">
                    <span class="">{scoreRow.row_title}</span>
                </div>
                {scoreRow.items.filter((item) => item.type == "absolute").map((item) => {
                const score = getQuestionScore(item.key);
                return (
                    <div class="ml-8">
                        <span class="inline-block w-20 mx-2 text-right">
                            {item.label}
                        </span>
                        <span class="inline-block w-20 text-right">
                            <Grade grade={score.grade} />
                        </span>
                        <span class="inline-block w-20 text-right">
                            {item.type == "absolute" ? (<ScoreAbs num={score.score} />) : (<ScoreRel num={score.score} />)}
                        </span>
                    </div>
                )})}
            </div>
            );
        })}
      </div>
    </div>
  </div>
</Base>
