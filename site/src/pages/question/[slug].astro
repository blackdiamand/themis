---
import Base from "@layouts/base.astro";
import QuestionProbChart from "@components/charts/question-probs.astro";
import Traders from "@atoms/traders.astro";
import Volume from "@atoms/volume.astro";
import Duration from "@atoms/duration.astro";
import Grade from "@atoms/grade.astro";
import ScoreRel from "@atoms/score-rel.astro";
import ScoreAbs from "@atoms/score-abs.astro";
import { Icon } from "astro-icon/components";
import {
  getMarkets,
  getQuestions,
  getMarketScores,
  getQuestionOverallScores,
  getCategories,
} from "@lib/api";

// Generate routes for all items
// Note: rendering still takes a while due to the question prob card
export async function getStaticPaths() {
  const categories = await getCategories();
  const questions = await getQuestions();
  const marketsAll = await getMarkets();
  const marketScoresAll = await getMarketScores();
  const questionScoresAll = await getQuestionOverallScores(null);
  return questions.map((question) => {
    const markets = marketsAll.filter(
      (market) => market.question_id === question.id,
    );
    const marketScores = marketScoresAll.filter(
      (score) => score.question_id === question.id,
    );
    const questionScores = questionScoresAll.filter(
      (score) => score.item_id === question.id.toString(),
    );
    return {
      params: { slug: question.slug },
      props: { categories, question, markets, marketScores, questionScores },
    };
  });
}
const { categories, question, markets, marketScores, questionScores } =
  Astro.props;

// Listed score types
const scoreCols = [
  { title: "Brier/Quadratic", key: "brier" },
  { title: "Logarithmic", key: "logarithmic" },
  { title: "Spherical", key: "spherical" },
];
const scoreRows = [
  {
    title: "At Market Midpoint",
    key: "midpoint",
    type: "absolute",
    optional: false,
  },
  {
    title: "Time-Weighted Average",
    key: "average",
    type: "absolute",
    optional: false,
  },
  {
    title: "30 Days Before Close",
    key: "before-close-days-30",
    type: "absolute",
    optional: true,
  },
  {
    title: "7 Days Before Close",
    key: "before-close-days-7",
    type: "absolute",
    optional: true,
  },
  {
    title: "Relative Score",
    key: "relative",
    type: "relative",
    optional: false,
  },
];

// Select category
const category = categories.find(
  (category) => category.slug === question.category_slug,
);
if (!category) {
  throw new Error(`Category not found for slug ${question.category_slug}`);
}

function getMarketScore(market_id: string, score_key: string) {
  return marketScores.find(
    (s) => s.market_id == market_id && s.score_type == score_key,
  );
}
function getQuestionScore(score_key: string) {
  return questionScores.find(
    (s) => s.item_id == question.id.toString() && s.score_type == score_key,
  );
}

// Get resolution from market
const resolution = markets[0].question_invert
  ? !markets[0].resolution
  : markets[0].resolution;
---

<Base title="Market">
  <div class="grid grid-cols-1 md:grid-cols-2 pt-4">
    <div class="p-4 m-2">
      <div class="text-2xl mb-2">{question.title}</div>
      <ul class="flex flex-wrap items-center gap-3 my-2">
        <li>
          Resolved
          {
            resolution ? (
              <span class="mx-1 px-2 rounded-sm bg-green/20">YES</span>
            ) : (
              <span class="mx-1 px-2 rounded-sm bg-red/20">NO</span>
            )
          }
        </li>
        <li>
          Category
          <span class="mx-1 px-2 rounded-sm bg-selection/20">
            <Icon name={category.icon} class="inline mr-0 mb-1" />
            <a href={`/category/${question.category_slug}`}>
              {question.category_name}
            </a>
          </span>
        </li>
      </ul>
      <ul class="flex flex-wrap items-center gap-3 my-2">
        <li><Duration num={question.total_duration} /></li>
        <li><Traders num={question.total_traders} /></li>
        <li><Volume num={question.total_volume} /></li>
      </ul>
      <!-- TODO: Tags
        <ul class="flex items-center space-x-4 my-2">
            <li class="font-semibold">Tags:</li>
            {question.tags.map((tag) => <li>{tag}</li>)}
        </ul>
      -->
      <div class="whitespace-pre-wrap my-2">{question.description}</div>
    </div>
    <div>
      <QuestionProbChart question={question} />
    </div>
  </div>

  <div class="p-2 m-2">
    <h1 class="text-2xl font-bold">Detailed Scores</h1>
  </div>
  <div class="bg-crust rounded-md drop-shadow-md p-4 m-2 overflow-x-auto">
    {
      markets.map((market) => (
        <div class="mb-6">
          {/* Platform/Market Header */}
          <div class="border-b-1">
            <ul class="flex flex-wrap items-center gap-x-3">
              <li class="font-bold text-lg">{market.platform_name}</li>
              <li>
                <Duration num={market.duration_days} />
              </li>
              {market.traders_count && (
                <li>
                  <Traders num={market.traders_count} />
                </li>
              )}
              {market.volume_usd && (
                <li>
                  <Volume num={market.volume_usd} />
                </li>
              )}
            </ul>
            <h3 class="italic">
              <a
                href={market.url}
                target="_blank"
                class="text-lavender text-sm"
              >
                {market.title}
                {market.question_invert ? "| Inverted" : ""}
                <Icon name="mdi:open-in-new" class="inline mb-1 ml-1" />
              </a>
            </h3>
          </div>

          {/* Score Details */}
          <table class="m-2 p-2">
            <thead>
              <tr class="my-2">
                <th class="px-10 min-w-50 text-left">Criterion</th>
                <th class="px-5">Grade</th>
                {scoreCols.map((col) => (
                  <th class="px-5 text-right">{col.title}</th>
                ))}
              </tr>
            </thead>
            <tbody class="">
              {scoreRows.map((row) => {
                const scoreForGrade = getMarketScore(
                  market.id,
                  `brier-${row.key}`,
                );
                if (!scoreForGrade) {
                  if (row.optional) {
                    return null;
                  } else {
                    throw new Error(`Market score brier/${row.key} not found`);
                  }
                }
                return (
                  <tr class="odd:bg-selection/10 py-5">
                    <td class="px-10 text-left">{row.title}</td>
                    <td class="px-10 text-center">
                      <div class="w-20 my-1">
                        <Grade grade={scoreForGrade.grade} />
                      </div>
                    </td>
                    {scoreCols.map((col) => {
                      const score = getMarketScore(
                        market.id,
                        `${col.key}-${row.key}`,
                      );
                      if (!score) {
                        if (row.optional) {
                          return null;
                        } else {
                          throw new Error(
                            `Market score ${col.key}/${row.key} not found`,
                          );
                        }
                      }
                      return (
                        <td class="px-5 mr-5 text-right">
                          {row.type == "absolute" ? (
                            <ScoreAbs num={score.score} />
                          ) : (
                            <ScoreRel num={score.score} />
                          )}
                        </td>
                      );
                    })}
                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>
      ))
    }
  </div>

  <div class="bg-crust rounded-md drop-shadow-md p-4 m-2 overflow-x-auto">
    {/* Overall Header */}
    <div
      class="flex space-x-4 border-b-1 flex-col sm:flex-row self-baseline sm:self-center"
    >
      <ul class="flex flex-wrap items-center gap-x-3">
        <li class="font-bold text-lg">Overall</li>
        <li>
          <Duration num={question.total_duration} />
        </li>
        <li>
          <Traders num={question.total_traders} />
        </li>
        <li>
          <Volume num={question.total_volume} />
        </li>
      </ul>
    </div>

    {/* Overall Score Details */}
    <table class="m-2 p-2">
      <thead>
        <tr class="my-2">
          <th class="px-10 min-w-50 text-left">Criterion</th>
          <th class="px-10">Grade</th>
          {scoreCols.map((col) => <th class="px-5 text-right">{col.title}</th>)}
        </tr>
      </thead>
      <tbody class="">
        {
          scoreRows.map((row) => {
            if (row.type === "relative") return null;
            const scoreForGrade = getQuestionScore(`brier-${row.key}`);
            if (!scoreForGrade) {
              if (row.optional) {
                return null;
              } else {
                throw new Error(`Question score brier/${row.key} not found`);
              }
            }
            if (scoreForGrade.grade == null) {
              return null;
            }
            return (
              <tr class="odd:bg-selection/10 py-5">
                <td class="px-10 text-left">{row.title}</td>
                <td class="px-10 text-center">
                  <div class="w-20 my-1">
                    <Grade grade={scoreForGrade.grade} />
                  </div>
                </td>
                {scoreCols.map((col) => {
                  const score = getQuestionScore(`${col.key}-${row.key}`);
                  if (!score) {
                    if (row.optional) {
                      return null;
                    } else {
                      throw new Error(
                        `Question score ${col.key}/${row.key} not found`,
                      );
                    }
                  }
                  return (
                    <td class="px-5 mr-5 text-right">
                      {row.type == "absolute" ? (
                        <ScoreAbs num={score.score} />
                      ) : (
                        <ScoreRel num={score.score} />
                      )}
                    </td>
                  );
                })}
              </tr>
            );
          })
        }
      </tbody>
    </table>
  </div>
</Base>
