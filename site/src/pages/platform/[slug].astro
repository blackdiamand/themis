---
import Base from "@layouts/base.astro";
import CategoryReportCard from "@components/category-report-card.astro";
import LinkButton from "@components/link-button.astro";
import SeeMoreLink from "@components/see-more-link.astro";
import LongText from "@atoms/long-text.astro";
import Grade from "@atoms/grade.astro";
import ScoreAbs from "@atoms/score-abs.astro";
import QuestionCard from "@components/question-card.astro";
import Traders from "@atoms/traders.astro";
import Volume from "@atoms/volume.astro";
import Markets from "@atoms/num-markets.astro";
import Star from "@icons/star.svg";
import {
  getPlatforms,
  getFeaturedQuestions,
  getMarketScoresByQuestion,
  getPlatformCategoryScores,
} from "@lib/api";

// Generate routes for all items
export async function getStaticPaths() {
  const platforms = await getPlatforms();
  return platforms.map((platform) => ({
    params: { slug: platform.slug },
    props: { platform },
  }));
}
const { platform } = Astro.props;

const platformCategoryScores =
  await getPlatformCategoryScores("brier-relative");
const featuredQuestions = await getFeaturedQuestions(6);
const marketScores = await getMarketScoresByQuestion(
  featuredQuestions.map((q) => q.id),
  "brier-relative",
);
---

<Base title={platform.name}>
  <div class="grid grid-cols-1 md:grid-cols-2 pt-4">
    <div class="p-4 m-2">
      <div class="text-2xl font-semibold border-b-2">
        Platform: {platform.name}
      </div>
      <div class="my-2">
        <ul class="flex items-center space-x-4">
          <li>
            <Markets num={platform.total_markets} />
          </li>
          <li>
            <Traders num={platform.total_traders} />
          </li>
          <li>
            <Volume num={platform.total_volume} />
          </li>
        </ul>
      </div>
      <LongText text={platform.long_description} />
    </div>
    <div>
      <CategoryReportCard
        scores={platformCategoryScores.filter(
          (s) => s.platform_slug == platform.slug,
        )}
        pivot="category"
      />
      <div class="grid grid-cols-1 md:grid-cols-2 mx-2">
        <div class="flex p-2">
          <LinkButton
            link={platform.site_url}
            text="Platform Home"
            icon="link-out"
          />
        </div>
        <div class="flex p-2">
          <LinkButton
            link={platform.wikipedia_url}
            text="Wikipedia Entry"
            icon="link-out"
          />
        </div>
      </div>
    </div>
  </div>
  <div class="p-2 m-2">
    <h1 class="text-2xl font-bold">Top Categories</h1>
  </div>
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4">
    {
      platformCategoryScores
        .filter((score) => score.category_slug !== "overall")
        .sort((a, b) => (b.score ?? 0) - (a.score ?? 0))
        .slice(0, 4)
        .map((score, index) => (
          <div class="bg-base-light text-crust p-4 m-2 rounded-lg first:border-4 first:border-amber-600/60 relative">
            {index === 0 && (
              <div class="absolute top-2 right-2 text-amber-600/60">
                <Star height={24} fill="currentColor" />
              </div>
            )}
            <div class="flex justify-between items-center">
              <h3 class="text-lg font-semibold">{score.category_name}</h3>
              <span class="text-xl font-semibold w-20">
                <Grade grade={score.grade} />
              </span>
            </div>
            <ul class="flex justify-between items-baseline p-2">
              <li>
                <Markets num={score.num_markets} />
              </li>
              <li>
                <ScoreAbs num={score.score} />
              </li>
            </ul>
          </div>
        ))
    }
  </div>
  <div class="p-2 m-2">
    <h1 class="text-2xl font-bold">Top-Performing Questions</h1>
  </div>
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3">
    {
      featuredQuestions.map((question) => {
        const questionScores = marketScores.filter(
          (score) => score.question_id === question.id,
        );
        return <QuestionCard question={question} scores={questionScores} />;
      })
    }
  </div>
  <SeeMoreLink
    link={`/questions?platform=${platform.slug}`}
    text={`See all ${platform.name} questions`}
  />
</Base>
