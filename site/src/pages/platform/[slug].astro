---
import Base from "@layouts/base.astro";
import CalibrationDefault from "@components/charts/calibration-default.astro";
import HistogramDefault from "@components/charts/histogram-default.astro";
import CategoryReportCard from "@components/category-report-card.astro";
import LinkButton from "@components/link-button.astro";
import SeeMoreLink from "@components/see-more-link.astro";
import LongText from "@atoms/long-text.astro";
import QuestionCardDetailed from "@components/question-card-detailed.astro";
import Traders from "@atoms/traders.astro";
import Volume from "@atoms/volume.astro";
import Markets from "@atoms/num-markets.astro";
import {
  getPlatforms,
  getMarkets,
  getCategories,
  getTopQuestionsForPlatform,
  getMarketScores,
  getPlatformCategoryScores,
  getPlatformOverallScores,
} from "@lib/api";

// Generate routes for all items
export async function getStaticPaths() {
  const platforms = await getPlatforms();
  return platforms.map((platform) => ({
    params: { slug: platform.slug },
    props: { platform },
  }));
}
const { platform } = Astro.props;

const categories = await getCategories();
const markets = await getMarkets();
const platformMarkets = markets.filter(
  (market) => market.platform_slug === platform.slug,
);
const platformCategoryScores = await getPlatformCategoryScores(null);
const platformOverallScores = await getPlatformOverallScores();
const featuredQuestions = await getTopQuestionsForPlatform(10, platform.slug);
const marketScores = await getMarketScores();
---

<Base title={platform.name}>
  <div class="grid grid-cols-1 md:grid-cols-2 pt-4">
    <div class="p-4 m-2">
      <div class="text-2xl font-semibold border-b-2">
        Platform: {platform.name}
      </div>
      <div class="my-2">
        <ul class="flex items-center space-x-4">
          <li>
            <Markets num={platform.total_markets} />
          </li>
          {
            platform.total_traders && (
              <li>
                <Traders num={platform.total_traders} />
              </li>
            )
          }
          {
            platform.total_volume && (
              <li>
                <Volume num={platform.total_volume} />
              </li>
            )
          }
        </ul>
      </div>
      <LongText text={platform.long_description} />
    </div>
    <div>
      <CategoryReportCard
        platforms={[platform]}
        categories={categories}
        platformCategoryScores={platformCategoryScores.filter(
          (score) => score.platform_slug == platform.slug,
        )}
        overallScores={platformOverallScores}
        pivot="category"
      />
      <div class="grid grid-cols-1 md:grid-cols-2 mx-2">
        <div class="flex p-2">
          <LinkButton
            link={platform.site_url}
            text="Platform Home"
            icon="link-out"
          />
        </div>
        <div class="flex p-2">
          <LinkButton
            link={platform.wikipedia_url}
            text="Wikipedia Entry"
            icon="link-out"
          />
        </div>
      </div>
    </div>
  </div>
  <div class="p-2 m-2">
    <h1 class="text-2xl font-bold">Charts</h1>
  </div>
  <div class="grid grid-cols-1 lg:grid-cols-2 gap-2">
    <CalibrationDefault
      platforms={[platform]}
      markets={platformMarkets}
      caption="Calibration plot from all resolved questions, market probability at midpoint versus average resolution value."
    />
    <HistogramDefault
      platforms={[platform]}
      scores={marketScores.filter((s) => s.platform_slug == platform.slug)}
      scoreType="brier-midpoint"
      caption="Brier scores from all resolved questions, using probability at market midpoint. Lower scores are better."
    />
  </div>
  <SeeMoreLink link={"/charts"} text={`See all charts`} />
  <div class="p-2 m-2">
    <h1 class="text-2xl font-bold">Top-Performing Questions</h1>
  </div>
  <div class="grid grid-cols-1">
    {
      featuredQuestions.map((question) => {
        return (
          <QuestionCardDetailed question={question} categories={categories} />
        );
      })
    }
  </div>
</Base>
