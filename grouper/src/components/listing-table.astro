---
interface HeaderItem {
    key: string;
    label: string;
}

interface TableItem {
    id?: string;
    slug?: string;
    [key: string]: any; // Allow for any additional properties
}

interface Props {
    headers: HeaderItem[];
    items: TableItem[];
    endpoint: string;
}

const { headers, items, endpoint } = Astro.props;
---

<div class="overflow-x-auto">
    <table
        class="min-w-full divide-y divide-subtext bg-crust rounded-lg shadow"
    >
        <thead>
            <tr>
                {
                    headers.map((header) => (
                        <th class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">
                            {header.label}
                        </th>
                    ))
                }
                <th
                    class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider"
                    >Actions</th
                >
            </tr>
        </thead>
        <tbody class="divide-y divide-subtext">
            {
                items.map((item) => (
                    <tr class="hover:bg-base-dark">
                        {headers.map((header) => (
                            <td class="px-6 py-4 whitespace-nowrap text-sm">
                                {item[header.key]}
                            </td>
                        ))}
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium actions">
                            <a
                                href={`/${endpoint}/${item.id || item.slug}`}
                                class="inline-flex items-center px-3 py-2 text-sm font-medium rounded-md text-white bg-blue/50 hover:bg-blue mr-2"
                            >
                                Edit
                            </a>
                            <button
                                class="delete-button inline-flex items-center px-3 py-2 text-sm font-medium rounded-md text-white bg-red/50 hover:bg-red"
                                data-endpoint={endpoint}
                                data-id={item.id}
                                data-slug={item.slug}
                            >
                                Delete
                            </button>
                        </td>
                    </tr>
                ))
            }
        </tbody>
    </table>
</div>

<script>
    import { fetchFromAPI } from "@lib/api";
    const deleteButtons = document.querySelectorAll(".delete-button");

    deleteButtons.forEach((button) => {
        button.addEventListener("click", async () => {
            const endpoint = button.getAttribute("data-endpoint");
            const id = button.getAttribute("data-id");
            const slug = button.getAttribute("data-slug");

            var attr = null;
            if (id) {
                attr = "id";
            } else if (slug) {
                attr = "slug";
            } else {
                alert("No item ID or slug found.");
            }
            const value = attr === "id" ? id : slug;

            if (confirm("Are you sure you want to delete this item?")) {
                try {
                    await fetchFromAPI(`${endpoint}?${attr}=eq.${value}`, {
                        method: "DELETE",
                        headers: {
                            Prefer: "return=representation",
                        },
                    });
                    window.location.reload();
                } catch (error) {
                    alert("Error deleting item: " + error.message);
                }
            }
        });
    });
</script>
