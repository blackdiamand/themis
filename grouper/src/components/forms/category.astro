---
const { category = {} } = Astro.props;
const isEditing = Object.keys(category).length > 0;
---

<form
    id="primaryForm"
    class="max-w-2xl mx-auto bg-crust p-6 rounded-lg shadow-md"
    data-is-editing={isEditing}
>
    <div class="mb-4">
        <label for="slug" class="block text-sm font-medium text-text mb-1"
            >Slug</label
        >
        <input
            type="text"
            id="slug"
            name="slug"
            value={category.slug || ""}
            required
            readonly={isEditing}
            class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue focus:border-indigo-500"
        />
    </div>

    <div class="mb-4">
        <label for="name" class="block text-sm font-medium text-text mb-1"
            >Name</label
        >
        <input
            type="text"
            id="name"
            name="name"
            value={category.name || ""}
            required
            class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue focus:border-indigo-500"
        />
    </div>

    <div class="mb-4">
        <label
            for="description"
            class="block text-sm font-medium text-text mb-1">Description</label
        >
        <textarea
            id="description"
            name="description"
            rows="3"
            class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue focus:border-indigo-500"
            >{category.description || ""}</textarea
        >
    </div>

    <div class="mb-4">
        <label
            for="parent_slug"
            class="block text-sm font-medium text-text mb-1">Parent Slug</label
        >
        <input
            type="text"
            id="parent_slug"
            name="parent_slug"
            value={category.parent_slug || ""}
            class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue focus:border-indigo-500"
        />
    </div>

    <div class="mb-4">
        <label class="flex items-center">
            <input
                type="checkbox"
                id="is_parent"
                name="is_parent"
                checked={category.is_parent || false}
                class="h-4 w-4 text-blue focus:ring-blue border-gray-300 rounded"
            />
            <span class="ml-2 text-sm text-text">Is Parent Category</span>
        </label>
    </div>

    <div class="mb-4">
        <label for="icon" class="block text-sm font-medium text-text mb-1"
            >Icon</label
        >
        <input
            type="text"
            id="icon"
            name="icon"
            value={category.icon || ""}
            class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue focus:border-indigo-500"
        />
    </div>

    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div class="mb-4">
            <label
                for="total_markets"
                class="block text-sm font-medium text-text mb-1"
                >Total Markets</label
            >
            <input
                type="number"
                id="total_markets"
                name="total_markets"
                value={category.total_markets || ""}
                class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue focus:border-indigo-500"
            />
        </div>

        <div class="mb-4">
            <label
                for="total_traders"
                class="block text-sm font-medium text-text mb-1"
                >Total Traders</label
            >
            <input
                type="number"
                id="total_traders"
                name="total_traders"
                value={category.total_traders || ""}
                class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue focus:border-indigo-500"
            />
        </div>

        <div class="mb-4">
            <label
                for="total_volume"
                class="block text-sm font-medium text-text mb-1"
                >Total Volume</label
            >
            <input
                type="number"
                id="total_volume"
                name="total_volume"
                step="0.01"
                value={category.total_volume || ""}
                class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue focus:border-indigo-500"
            />
        </div>
    </div>

    <div
        id="errorMessage"
        class="hidden max-w-full mx-auto mb-4 p-4 bg-red/20 border border-red text-red rounded-lg"
    >
        <p class="font-medium">Error:</p>
        <p id="errorMessageText"></p>
    </div>

    <div class="flex justify-end space-x-4 mt-6">
        <a
            href="/categories"
            class="px-4 py-2 bg-blue/50 text-text rounded-md hover:bg-blue transition-colors"
        >
            Cancel
        </a>
        <button
            type="submit"
            id="submitBtn"
            class="px-4 py-2 bg-green/50 text-white rounded-md hover:bg-green transition-colors"
        >
            {isEditing ? "Update" : "Create"} Category
        </button>
    </div>
</form>

<script>
    import type { Category } from "@types";
    import { createCategory, updateCategory } from "@lib/api";

    const form = document.getElementById("primaryForm");
    const isEditing = form.dataset.isEditing === "true";

    const errorDiv = document.getElementById("errorMessage");
    const errorText = document.getElementById("errorMessageText");
    const submitBtn = document.getElementById("submitBtn");

    form.addEventListener("submit", async (e) => {
        e.preventDefault();

        // Show loading state
        submitBtn.disabled = true;
        submitBtn.innerText = "Saving...";
        errorDiv.classList.add("hidden");

        try {
            // Get form data
            const formData = new FormData(form);
            const categoryData: Category = Object.fromEntries(
                formData.entries(),
            );

            // Convert empty strings to null
            Object.keys(categoryData).forEach((key) => {
                if (categoryData[key] === "") {
                    categoryData[key] = null;
                }
            });

            // Create category
            if (isEditing) {
                await updateCategory(categoryData);
            } else {
                await createCategory(categoryData);
            }

            // Redirect on success
            window.location.href = "/categories";
        } catch (error) {
            // Show error
            errorText.textContent =
                error.message ||
                "An unknown error occurred while creating the category";
            errorDiv.classList.remove("hidden");

            // Reset button
            submitBtn.disabled = false;
            submitBtn.innerText = "Create Category";

            // Scroll to error
            errorDiv.scrollIntoView({ behavior: "smooth" });
        }
    });
</script>
